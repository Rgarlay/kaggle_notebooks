{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.11.13","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"none","dataSources":[{"sourceId":94635,"databundleVersionId":13121456,"sourceType":"competition"}],"dockerImageVersionId":31089,"isInternetEnabled":false,"language":"python","sourceType":"notebook","isGpuEnabled":false}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"code","source":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle/python Docker image: https://github.com/kaggle/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)\npd.set_option('display.max_columns', None)\npd.set_option('display.max_colwidth',None)\nimport re\nimport nltk\nfrom nltk.stem import WordNetLemmatizer\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import roc_auc_score\nfrom sklearn.feature_extraction.text import TfidfVectorizer\nfrom xgboost import XGBClassifier\n\n# Input data files are available in the read-only \"../input/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('/kaggle/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n\n\n\n# You can write up to 20GB to the current directory (/kaggle/working/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to /kaggle/temp/, but they won't be saved outside of the current session","metadata":{"_uuid":"8f2839f25d086af736a60e9eeb907d3b93b6e0e5","_cell_guid":"b1076dfc-b9ad-4769-8c92-a6c4dae69d19","trusted":true,"execution":{"iopub.status.busy":"2025-09-28T11:55:16.563870Z","iopub.execute_input":"2025-09-28T11:55:16.564039Z","iopub.status.idle":"2025-09-28T11:55:19.769719Z","shell.execute_reply.started":"2025-09-28T11:55:16.564023Z","shell.execute_reply":"2025-09-28T11:55:19.768922Z"}},"outputs":[{"name":"stdout","text":"/kaggle/input/jigsaw-agile-community-rules/sample_submission.csv\n/kaggle/input/jigsaw-agile-community-rules/train.csv\n/kaggle/input/jigsaw-agile-community-rules/test.csv\n","output_type":"stream"}],"execution_count":1},{"cell_type":"code","source":"combined_stopwords = {\"'d\", \"'ll\", \"'m\", \"'re\", \"'s\", \"'ve\", 'a', 'about', 'above', 'across', 'after', 'afterwards',\n                      'again', 'against', 'ain', 'all', 'almost', 'alone', 'along', 'already', 'also', 'although', 'always',\n                      'am', 'among', 'amongst', 'amount', 'an', 'and', 'another', 'any', 'anyhow', 'anyone', 'anything', 'anyway', \n                      'anywhere', 'are', 'aren', \"aren't\", 'around', 'as', 'at', 'back', 'be', 'became', 'because', 'become', 'becomes',\n                      'becoming', 'been', 'before', 'beforehand', 'behind', 'being', 'below', 'beside', 'besides', 'between', 'beyond', \n                      'both', 'bottom', 'but', 'by', 'ca', 'call', 'can', 'cannot', 'could', 'couldn', \"couldn't\", 'd', 'did', 'didn', \"didn't\",\n                      'do', 'does', 'doesn', \"doesn't\", 'doing', 'don', \"don't\", 'done', 'down', 'due', 'during', 'each', 'eight', 'either', \n                      'eleven', 'else', 'elsewhere', 'empty', 'enough', 'even', 'ever', 'every', 'everyone', 'everything', 'everywhere', 'except',\n                      'few', 'fifteen', 'fifty', 'first', 'five', 'for', 'former', 'formerly', 'forty', 'four', 'from', 'front', 'full', 'further',\n                      'get', 'give', 'go', 'had', 'hadn', \"hadn't\", 'has', 'hasn', \"hasn't\", 'have', 'haven', \"haven't\", 'having', 'he', \"he'd\", \n                      \"he'll\", \"he's\", 'hence', 'her', 'here', 'hereafter', 'hereby', 'herein', 'hereupon', 'hers', 'herself', 'him', 'himself',\n                      'his', 'how', 'however', 'hundred', 'i', \"i'd\", \"i'll\", \"i'm\", \"i've\", 'if', 'in', 'indeed', 'into', 'is', 'isn', \"isn't\",\n                      'it', \"it'd\", \"it'll\", \"it's\", 'its', 'itself', 'just', 'keep', 'last', 'latter', 'latterly', 'least', 'less', 'll', 'm', \n                      'ma', 'made', 'make', 'many', 'may', 'me', 'meanwhile', 'might', 'mightn', \"mightn't\", 'mine', 'more', 'moreover', 'most',\n                      'mostly', 'move', 'much', 'must', 'mustn', \"mustn't\", 'my', 'myself', \"n't\", 'name', 'namely', 'needn', \"needn't\", 'neither', \n                      'never', 'nevertheless', 'next', 'nine', 'no', 'nobody', 'none', 'noone', 'nor', 'not', 'nothing', 'now', 'nowhere', 'n‘t',\n                      'n’t', 'o', 'of', 'off', 'often', 'on', 'once', 'one', 'only', 'onto', 'or', 'other', 'others', 'otherwise', 'our', 'ours',\n                      'ourselves', 'out', 'over', 'own', 'part', 'per', 'perhaps', 'please', 'put', 'quite', 'rather', 're', 'really', 'regarding',\n                      's', 'same', 'say', 'see', 'seem', 'seemed', 'seeming', 'seems', 'serious', 'several', 'shan', \"shan't\", 'she', \"she'd\",\n                      \"she'll\", \"she's\", 'should', \"should've\", 'shouldn', \"shouldn't\", 'show', 'side', 'since', 'six', 'sixty', 'so', 'some',\n                      'somehow', 'someone', 'something', 'sometime', 'sometimes', 'somewhere', 'still', 'such', 't', 'take', 'ten', 'than', \n                      'that', \"that'll\", 'the', 'their', 'theirs', 'them', 'themselves', 'then', 'thence', 'there', 'thereafter', 'thereby', \n                      'therefore', 'therein', 'thereupon', 'these', 'they', \"they'd\", \"they'll\", \"they're\", \"they've\", 'third', 'this', 'those', \n                      'though', 'three', 'through', 'throughout', 'thru', 'thus', 'to', 'together', 'too', 'top', 'toward', 'towards', 'twelve',\n                      'twenty', 'two', 'under', 'unless', 'until', 'up', 'upon', 'us', 'used', 'using', 'various', 've', 'very', 'via', 'was', \n                      'wasn', \"wasn't\", 'we', \"we'd\", \"we'll\", \"we're\", \"we've\", 'well', 'were', 'weren', \"weren't\", 'what', 'whatever', 'when',\n                      'whence', 'whenever', 'where', 'whereafter', 'whereas', 'whereby', 'wherein', 'whereupon', 'wherever', 'whether', 'which',\n                      'while', 'whither', 'who', 'whoever', 'whole', 'whom', 'whose', 'why', 'will', 'with', 'within', 'without', 'won', \"won't\",\n                      'would', 'wouldn', \"wouldn't\", 'y', 'yet', 'you', \"you'd\", \"you'll\", \"you're\", \"you've\", 'your', 'yours', 'yourself',\n                      'yourselves', '‘d', '‘ll', '‘m', '‘re', '‘s', '‘ve', '’d', '’ll', '’m', '’re', '’s', '’ve'}\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-09-28T11:55:19.770906Z","iopub.execute_input":"2025-09-28T11:55:19.771280Z","iopub.status.idle":"2025-09-28T11:55:19.782712Z","shell.execute_reply.started":"2025-09-28T11:55:19.771261Z","shell.execute_reply":"2025-09-28T11:55:19.781929Z"},"jupyter":{"source_hidden":true}},"outputs":[],"execution_count":2},{"cell_type":"code","source":"df_train_original = pd.read_csv('/kaggle/input/jigsaw-agile-community-rules/train.csv')\ndf_test_original = pd.read_csv('/kaggle/input/jigsaw-agile-community-rules/test.csv')","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-09-28T11:55:19.783535Z","iopub.execute_input":"2025-09-28T11:55:19.783790Z","iopub.status.idle":"2025-09-28T11:55:19.887267Z","shell.execute_reply.started":"2025-09-28T11:55:19.783768Z","shell.execute_reply":"2025-09-28T11:55:19.886451Z"}},"outputs":[],"execution_count":3},{"cell_type":"code","source":"# def dataset_basics(df):\n#     print(f'Number of empty rows \\n {df_train.isna().sum()} \\n')\n#     print(f'Number of duplicate rows {df.duplicated().sum()} \\n')\n#     print(f'\\n Dtypes and other info \\n {df.info()} \\n')\n#     print(f'Shape of the dataframe {df.shape}')\n#     print(f'no_of unique subreddits',df['subreddit'].nunique())\n#     print(f'Percent of 0s and 1s: ',df['rule_violation'].value_counts()/df_train.shape[0] * 100)\n# dataset_basics(df_train_original)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-09-28T11:55:35.635272Z","iopub.execute_input":"2025-09-28T11:55:35.635569Z","iopub.status.idle":"2025-09-28T11:55:35.639098Z","shell.execute_reply.started":"2025-09-28T11:55:35.635546Z","shell.execute_reply":"2025-09-28T11:55:35.638353Z"},"jupyter":{"source_hidden":true}},"outputs":[],"execution_count":4},{"cell_type":"code","source":"# df_train = df_train_original['rule'].str.split(',',expand=True)\n\n# df_train.fillna('0',inplace=True)\n\n#df_train.columns = ['rule 1','rule 2','rule 3','rule 4']\n\n## till here it works perfectly\n\n# df_train['rule 2'] = df_train['rule 2'].apply(lambda x : 1 if 'referral links' in str(x).lower() else 0)\n\n# df_train = df_train.rename(columns = {'rule 2':'referral link allowed'})\n\n# #column 0 (legal_advice)\n\n# df_train['legal_advice_allowed'] = df_train['rule 1'].apply(lambda x: 0 if 'legal' in str(x).lower() else 1)\n\n# #column 1\n# df_train['rule 4'] = df_train['rule 4'].apply(lambda x: 0 if 'promotional' in str(x).lower() else 1)\n\n# df_train = df_train.rename(columns = {'rule 4':'Promotions allowed'})\n\n# ##column 1: advertising\n\n# df_train['rule 3'] = df_train['rule 3'].apply(lambda x: 0 if 'advertising' in str(x).lower() else 1)\n\n# df_train = df_train.rename(columns = {'rule 3':'Advertising allowed'})\n\n# ## Dealing with  spam part using new created dataframe\n\n# df_train_1 = df_train['rule 1'].str.split(':',expand=True)\n\n# df_train = df_train.drop(columns = ['rule 1'])\n\n# df_train_1.columns = ['Advert','spam']\n\n# df_train_1 = df_train_1.drop(columns = ['Advert'])\n    \n# df_train_1['spam allowed'] = df_train_1['spam'].apply(lambda x: 0 if 'spam' in str(x).lower() else 1)\n\n# df_train['spam allowed'] = df_train_1['spam allowed']\n\n# ### Testing Data \n\n# df_test = df_test_original['rule'].str.split(',', expand=True)\n\n# df_test.fillna('0', inplace=True)\n\n# df_test.columns = ['rule 1', 'rule 2', 'rule 3', 'rule 4']\n\n# ## till here it works perfectly\n\n# df_test['rule 2'] = df_test['rule 2'].apply(lambda x: 1 if 'referral links' in str(x).lower() else 0)\n\n# df_test = df_test.rename(columns={'rule 2': 'referral link allowed'})\n\n# # column 0 (legal_advice)\n# df_test['legal_advice_allowed'] = df_test['rule 1'].apply(lambda x: 0 if 'legal' in str(x).lower() else 1)\n\n# # column 1\n# df_test['rule 4'] = df_test['rule 4'].apply(lambda x: 0 if 'promotional' in str(x).lower() else 1)\n\n# df_test = df_test.rename(columns={'rule 4': 'Promotions allowed'})\n\n# # column 1: advertising\n# df_test['rule 3'] = df_test['rule 3'].apply(lambda x: 0 if 'advertising' in str(x).lower() else 1)\n\n# df_test = df_test.rename(columns={'rule 3': 'Advertising allowed'})\n\n# ## Dealing with spam part using new created dataframe\n# df_test_1 = df_test['rule 1'].str.split(':', expand=True)\n\n# df_test = df_test.drop(columns=['rule 1'])\n\n# df_test_1.columns = ['Advert', 'spam']\n\n# df_test_1 = df_test_1.drop(columns=['Advert'])\n    \n# df_test_1['spam allowed'] = df_test_1['spam'].apply(lambda x: 0 if 'spam' in str(x).lower() else 1)\n\n# df_test['spam allowed'] = df_test_1['spam allowed']\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-09-28T11:55:35.985842Z","iopub.execute_input":"2025-09-28T11:55:35.986066Z","iopub.status.idle":"2025-09-28T11:55:35.990428Z","shell.execute_reply.started":"2025-09-28T11:55:35.986047Z","shell.execute_reply":"2025-09-28T11:55:35.989835Z"},"jupyter":{"source_hidden":true}},"outputs":[],"execution_count":5},{"cell_type":"code","source":"df_train_original.head(1)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-09-28T11:55:36.313758Z","iopub.execute_input":"2025-09-28T11:55:36.313992Z","iopub.status.idle":"2025-09-28T11:55:36.335385Z","shell.execute_reply.started":"2025-09-28T11:55:36.313972Z","shell.execute_reply":"2025-09-28T11:55:36.334848Z"}},"outputs":[{"execution_count":6,"output_type":"execute_result","data":{"text/plain":"   row_id                                                         body  \\\n0       0  Banks don't want you to know this! Click here to know more!   \n\n                                                                                                      rule  \\\n0  No Advertising: Spam, referral links, unsolicited advertising, and promotional content are not allowed.   \n\n    subreddit  \\\n0  Futurology   \n\n                                                                                                                                                                                                              positive_example_1  \\\n0  If you could tell your younger self something different about sex, what would that be?\\n\\ni AM IN A CONTEST TO WIN FUNDING FOR MY SEX POSITIVE FILM: VOTE HERE:\\n\\nhttp://sheknows.offerpop.com/campaign/813112/entry/v144417   \n\n                                                       positive_example_2  \\\n0  hunt for lady for jack off in neighbourhood http://url.inmusi.com/gakq   \n\n                                                                                                                                                                                                                                                                                                                                                     negative_example_1  \\\n0  Watch Golden Globe Awards 2017 Live Online in HD Coverage without ADS (VIP STREAMS)\\n=\\n\\nHD STREAM QUALITY >>> [WATCH LINK1](http://forum.submitexpress.com/viewtopic.php?f=9&t=215858)\\n=\\n\\nHD BROADCASTING QUALITY >>> [WATCH LINK1](http://forum.submitexpress.com/viewtopic.php?f=9&t=215858)\\n=\\n\\nMobile Compatibility: YES\\n=\\n\\nNO ADS | NO ADS | ADS\\n=\\n   \n\n                                                                                          negative_example_2  \\\n0  DOUBLE CEE x BANDS EPPS - \"BIRDS\"\\n\\nDOWNLOAD/STREAM:\\n\\nhttp://music.theblacksmithed.com/download/birds/   \n\n   rule_violation  \n0               0  ","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>row_id</th>\n      <th>body</th>\n      <th>rule</th>\n      <th>subreddit</th>\n      <th>positive_example_1</th>\n      <th>positive_example_2</th>\n      <th>negative_example_1</th>\n      <th>negative_example_2</th>\n      <th>rule_violation</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>0</td>\n      <td>Banks don't want you to know this! Click here to know more!</td>\n      <td>No Advertising: Spam, referral links, unsolicited advertising, and promotional content are not allowed.</td>\n      <td>Futurology</td>\n      <td>If you could tell your younger self something different about sex, what would that be?\\n\\ni AM IN A CONTEST TO WIN FUNDING FOR MY SEX POSITIVE FILM: VOTE HERE:\\n\\nhttp://sheknows.offerpop.com/campaign/813112/entry/v144417</td>\n      <td>hunt for lady for jack off in neighbourhood http://url.inmusi.com/gakq</td>\n      <td>Watch Golden Globe Awards 2017 Live Online in HD Coverage without ADS (VIP STREAMS)\\n=\\n\\nHD STREAM QUALITY &gt;&gt;&gt; [WATCH LINK1](http://forum.submitexpress.com/viewtopic.php?f=9&amp;t=215858)\\n=\\n\\nHD BROADCASTING QUALITY &gt;&gt;&gt; [WATCH LINK1](http://forum.submitexpress.com/viewtopic.php?f=9&amp;t=215858)\\n=\\n\\nMobile Compatibility: YES\\n=\\n\\nNO ADS | NO ADS | ADS\\n=\\n</td>\n      <td>DOUBLE CEE x BANDS EPPS - \"BIRDS\"\\n\\nDOWNLOAD/STREAM:\\n\\nhttp://music.theblacksmithed.com/download/birds/</td>\n      <td>0</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"metadata":{}}],"execution_count":6},{"cell_type":"code","source":"# for i in df_train.columns:\n#     df_train_original[i] = df_train[i]\n\n# for i in df_test.columns:\n#     df_test_original[i] = df_test[i]","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-09-28T11:55:38.662016Z","iopub.execute_input":"2025-09-28T11:55:38.662608Z","iopub.status.idle":"2025-09-28T11:55:38.665707Z","shell.execute_reply.started":"2025-09-28T11:55:38.662583Z","shell.execute_reply":"2025-09-28T11:55:38.665089Z"},"jupyter":{"source_hidden":true}},"outputs":[],"execution_count":7},{"cell_type":"code","source":"df_original = df_train_original[['body', 'rule']]\ndf_original.loc[:,'rule_violation'] = df_train_original['rule_violation'].values\n    \ndf_p1 = df_train_original[['positive_example_1','rule_violation','rule']]\ndf_p1.loc[:,'rule_violation'] = 0\ndf_p1 = df_p1.rename(columns = {'positive_example_1':'body'})\n        \ndf_p2 = df_train_original[['positive_example_2','rule_violation','rule']]\ndf_p2.loc[:,'rule_violation'] = 0\ndf_p2 = df_p2.rename(columns = {'positive_example_2':'body'})\n        \ndf_n1 = df_train_original[['negative_example_1','rule_violation','rule']]\ndf_n1.loc[:,'rule_violation'] = 1\ndf_n1 = df_n1.rename(columns = {'negative_example_1':'body'})\n        \ndf_n2 = df_train_original[['negative_example_2','rule_violation','rule']]\ndf_n2.loc[:,'rule_violation'] = 1\ndf_n2 = df_n2.rename(columns = {'negative_example_2':'body'})\n    \ndf_train_total = pd.concat([df_original,df_p1,df_p2,df_n1,df_n2], axis = 0,ignore_index=True)\n\n##TESTING DATA\n\ndf_test_total = df_test_original[['body','rule']]        ","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-09-28T11:55:39.157783Z","iopub.execute_input":"2025-09-28T11:55:39.158286Z","iopub.status.idle":"2025-09-28T11:55:39.179824Z","shell.execute_reply.started":"2025-09-28T11:55:39.158260Z","shell.execute_reply":"2025-09-28T11:55:39.179036Z"}},"outputs":[{"name":"stderr","text":"/tmp/ipykernel_36/4048906974.py:2: SettingWithCopyWarning: \nA value is trying to be set on a copy of a slice from a DataFrame.\nTry using .loc[row_indexer,col_indexer] = value instead\n\nSee the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n  df_original.loc[:,'rule_violation'] = df_train_original['rule_violation'].values\n","output_type":"stream"}],"execution_count":8},{"cell_type":"code","source":"df_train_total.isna().sum()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-09-28T11:55:39.857860Z","iopub.execute_input":"2025-09-28T11:55:39.858253Z","iopub.status.idle":"2025-09-28T11:55:39.865111Z","shell.execute_reply.started":"2025-09-28T11:55:39.858231Z","shell.execute_reply":"2025-09-28T11:55:39.864416Z"}},"outputs":[{"execution_count":9,"output_type":"execute_result","data":{"text/plain":"body              0\nrule              0\nrule_violation    0\ndtype: int64"},"metadata":{}}],"execution_count":9},{"cell_type":"code","source":"def cleaning_text(text_file):\n    \n     ## Removing URLs\n    pattern = re.compile('https?:\\/\\/\\S+|www\\.\\S+|Https?:\\/\\/\\S+|\\S+\\.com\\S+|\\S+\\.com|\\[.*?\\]|\\S+ \\. com.*')  \n    for i in range(len(text_file)):\n        text_file[i] = pattern.sub(r'',text_file[i])\n        \n    ##Removing HTML rags\n    pattern = re.compile('<.*?>')       \n    for i in range(len(text_file)):\n        text_file[i] = pattern.sub(r'',text_file[i]) \n        \n    ## Removing Emails and Hashtags\n    pattern = re.compile('#\\S+|@\\S+|\\S+\\@\\S+|\\S+@')             \n    for i in range(len(text_file)):\n        text_file[i] = pattern.sub(r'',text_file[i]) \n        \n    ### Removing username and subreddit mentions\n    pattern = re.compile('u\\/\\S+|r\\/\\S+')\n    for i in range(len(text_file)):\n        text_file[i] = pattern.sub(r'',text_file[i])\n        \n    #emotions, symbols, pictographs, transport and map symbols, flags etx.        \n    pattern = re.compile(\"[\"\n                            u\"\\U0001F600-\\U0001F64F\"  # emoticons\n                            u\"\\U0001F300-\\U0001F5FF\"  # symbols & pictographs\n                            u\"\\U0001F680-\\U0001F6FF\"  # transport & map symbols\n                            u\"\\U0001F1E0-\\U0001F1FF\"  # flags (iOS)\n                            u\"\\U00002702-\\U000027B0\"\n                            u\"\\U000024C2-\\U0001F251\"\n                            \"]+\", flags=re.UNICODE)\n    for i in range(len(text_file)):\n        text_file[i] = pattern.sub(r'',text_file[i])\n        \n    ##Removing Numbers & \\n spaces\n    pattern = re.compile('\\d|\\\\n')             \n    for i in range(len(text_file)):\n        text_file[i] = pattern.sub(r'',text_file[i])\n\n    return text_file\n\n##TRAINING DATA ----------------------\n\ntext_train_file = df_train_total['body'].to_list()\ntext_train_processed_file = cleaning_text(text_train_file)\n\n##TESTING DATA -------------------------------------------------------\n\ntext_testing_file = df_test_total['body'].to_list()\ntext_testing_processed_file = cleaning_text(text_testing_file)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-09-28T11:55:43.729769Z","iopub.execute_input":"2025-09-28T11:55:43.730495Z","iopub.status.idle":"2025-09-28T11:55:44.143335Z","shell.execute_reply.started":"2025-09-28T11:55:43.730468Z","shell.execute_reply":"2025-09-28T11:55:44.142796Z"}},"outputs":[],"execution_count":10},{"cell_type":"code","source":"lemmatizer = WordNetLemmatizer()\n\ndef preprocessing_data(dataframe, text_file):\n    cleaned_text = []\n    preprocessed_text = []\n    for i in range(len(dataframe)):\n        text1 = re.sub('[^a-zA-Z]',' ',text_file[i])\n        text1 = text1.lower()\n        text1 = [lemmatizer.lemmatize(word) for word in text1 if word not in combined_stopwords]\n        cleaned_text = ''.join(text1)\n        preprocessed_text.append(cleaned_text)\n    return preprocessed_text\n\n\npreprocessed_training_text = preprocessing_data(dataframe=df_train_total,text_file =  text_train_processed_file)\npreprocessed_testing_text1 = preprocessing_data(dataframe = df_test_total, text_file = text_testing_processed_file )\n\ntrain_rule_violation = df_train_total['rule'].to_list()\ntest_rule_violation = df_test_total['rule'].to_list()\n\nrule_train = preprocessing_data(dataframe=df_train_total, text_file = train_rule_violation)\nrule_test = preprocessing_data(dataframe=df_test_total, text_file = test_rule_violation)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-09-28T11:55:46.936643Z","iopub.execute_input":"2025-09-28T11:55:46.937413Z","iopub.status.idle":"2025-09-28T11:55:53.695103Z","shell.execute_reply.started":"2025-09-28T11:55:46.937380Z","shell.execute_reply":"2025-09-28T11:55:53.694315Z"}},"outputs":[],"execution_count":11},{"cell_type":"code","source":"\ndf_train_total['body'] = preprocessed_training_text\ndf_test_total['body'] = preprocessed_testing_text1  \n\ndf_train_total['rule'] = rule_train\ndf_test_total['rule'] = rule_test\n\nx = df_train_total.drop(columns = ['rule_violation'])\ny = df_train_total['rule_violation']\n\nx_train,x_test,y_train,y_test = train_test_split(x,y,train_size = 0.75, random_state = 42)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-09-28T12:11:14.103491Z","iopub.execute_input":"2025-09-28T12:11:14.104244Z","iopub.status.idle":"2025-09-28T12:11:14.115299Z","shell.execute_reply.started":"2025-09-28T12:11:14.104213Z","shell.execute_reply":"2025-09-28T12:11:14.114708Z"}},"outputs":[{"name":"stderr","text":"/tmp/ipykernel_36/1931941891.py:2: SettingWithCopyWarning: \nA value is trying to be set on a copy of a slice from a DataFrame.\nTry using .loc[row_indexer,col_indexer] = value instead\n\nSee the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n  df_test_total['body'] = preprocessed_testing_text1\n/tmp/ipykernel_36/1931941891.py:5: SettingWithCopyWarning: \nA value is trying to be set on a copy of a slice from a DataFrame.\nTry using .loc[row_indexer,col_indexer] = value instead\n\nSee the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n  df_test_total['rule'] = rule_test\n","output_type":"stream"}],"execution_count":27},{"cell_type":"code","source":"##Now we have to do some tokenization\n\nvector = TfidfVectorizer(max_features = 2500, ngram_range= (1,2))\n\nx_train_tokenized = vector.fit_transform(x_train[['body','rule']])\nx_test_tokenized = vector.transform(x_test[['body','rule']])\n\nxgb = XGBClassifier()\n\nxgb.fit(x_train_tokenized,y_train)\n\ny_pred = xgb.predict_proba(x_test_tokenized)\n\n#print(roc_auc_score(y_test,y_pred))","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-09-28T11:42:07.520210Z","iopub.execute_input":"2025-09-28T11:42:07.520512Z","iopub.status.idle":"2025-09-28T11:42:12.020074Z","shell.execute_reply.started":"2025-09-28T11:42:07.520487Z","shell.execute_reply":"2025-09-28T11:42:12.018833Z"},"collapsed":true,"jupyter":{"source_hidden":true,"outputs_hidden":true}},"outputs":[{"name":"stdout","text":"Traceback (most recent call last):\n  File \"/usr/local/lib/python3.11/dist-packages/IPython/core/interactiveshell.py\", line 3553, in run_code\n    exec(code_obj, self.user_global_ns, self.user_ns)\n  File \"/tmp/ipykernel_36/3326695795.py\", line 10, in <cell line: 0>\n    xgb.fit(x_train_tokenized,y_train)\n  File \"/usr/local/lib/python3.11/dist-packages/xgboost/core.py\", line 730, in inner_f\n    return func(**kwargs)\n           ^^^^^^^^^^^^^^\n  File \"/usr/local/lib/python3.11/dist-packages/xgboost/sklearn.py\", line 1519, in fit\n    self._Booster = train(\n                    ^^^^^^\n  File \"/usr/local/lib/python3.11/dist-packages/xgboost/core.py\", line 730, in inner_f\n    return func(**kwargs)\n           ^^^^^^^^^^^^^^\n  File \"/usr/local/lib/python3.11/dist-packages/xgboost/training.py\", line 181, in train\n    bst.update(dtrain, i, obj)\n  File \"/usr/local/lib/python3.11/dist-packages/xgboost/core.py\", line 2051, in update\n    _LIB.XGBoosterUpdateOneIter(\nKeyboardInterrupt\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File \"/usr/local/lib/python3.11/dist-packages/IPython/core/interactiveshell.py\", line 2099, in showtraceback\n    stb = value._render_traceback_()\n          ^^^^^^^^^^^^^^^^^^^^^^^^\nAttributeError: 'KeyboardInterrupt' object has no attribute '_render_traceback_'\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File \"/usr/local/lib/python3.11/dist-packages/IPython/core/ultratb.py\", line 1101, in get_records\n    return _fixed_getinnerframes(etb, number_of_lines_of_context, tb_offset)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/usr/local/lib/python3.11/dist-packages/IPython/core/ultratb.py\", line 248, in wrapped\n    return f(*args, **kwargs)\n           ^^^^^^^^^^^^^^^^^^\n  File \"/usr/local/lib/python3.11/dist-packages/IPython/core/ultratb.py\", line 281, in _fixed_getinnerframes\n    records = fix_frame_records_filenames(inspect.getinnerframes(etb, context))\n                                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/usr/lib/python3.11/inspect.py\", line 1739, in getinnerframes\n    traceback_info = getframeinfo(tb, context)\n                     ^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/usr/lib/python3.11/inspect.py\", line 1684, in getframeinfo\n    filename = getsourcefile(frame) or getfile(frame)\n               ^^^^^^^^^^^^^^^^^^^^\n  File \"/usr/lib/python3.11/inspect.py\", line 948, in getsourcefile\n    module = getmodule(object, filename)\n             ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/usr/lib/python3.11/inspect.py\", line 997, in getmodule\n    os.path.realpath(f)] = module.__name__\n    ^^^^^^^^^^^^^^^^^^^\n  File \"<frozen posixpath>\", line 416, in realpath\n  File \"<frozen posixpath>\", line 460, in _joinrealpath\nKeyboardInterrupt\n","output_type":"stream"},{"traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mKeyboardInterrupt\u001b[0m                         Traceback (most recent call last)","    \u001b[0;31m[... skipping hidden 1 frame]\u001b[0m\n","\u001b[0;32m/tmp/ipykernel_36/3326695795.py\u001b[0m in \u001b[0;36m<cell line: 0>\u001b[0;34m()\u001b[0m\n\u001b[1;32m      9\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 10\u001b[0;31m \u001b[0mxgb\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mfit\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mx_train_tokenized\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0my_train\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     11\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.11/dist-packages/xgboost/core.py\u001b[0m in \u001b[0;36minner_f\u001b[0;34m(*args, **kwargs)\u001b[0m\n\u001b[1;32m    729\u001b[0m                 \u001b[0mkwargs\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mk\u001b[0m\u001b[0;34m]\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0marg\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 730\u001b[0;31m             \u001b[0;32mreturn\u001b[0m \u001b[0mfunc\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    731\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.11/dist-packages/xgboost/sklearn.py\u001b[0m in \u001b[0;36mfit\u001b[0;34m(self, X, y, sample_weight, base_margin, eval_set, eval_metric, early_stopping_rounds, verbose, xgb_model, sample_weight_eval_set, base_margin_eval_set, feature_weights, callbacks)\u001b[0m\n\u001b[1;32m   1518\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1519\u001b[0;31m             self._Booster = train(\n\u001b[0m\u001b[1;32m   1520\u001b[0m                 \u001b[0mparams\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.11/dist-packages/xgboost/core.py\u001b[0m in \u001b[0;36minner_f\u001b[0;34m(*args, **kwargs)\u001b[0m\n\u001b[1;32m    729\u001b[0m                 \u001b[0mkwargs\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mk\u001b[0m\u001b[0;34m]\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0marg\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 730\u001b[0;31m             \u001b[0;32mreturn\u001b[0m \u001b[0mfunc\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    731\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.11/dist-packages/xgboost/training.py\u001b[0m in \u001b[0;36mtrain\u001b[0;34m(params, dtrain, num_boost_round, evals, obj, feval, maximize, early_stopping_rounds, evals_result, verbose_eval, xgb_model, callbacks, custom_metric)\u001b[0m\n\u001b[1;32m    180\u001b[0m             \u001b[0;32mbreak\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 181\u001b[0;31m         \u001b[0mbst\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mupdate\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mdtrain\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mi\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mobj\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    182\u001b[0m         \u001b[0;32mif\u001b[0m \u001b[0mcb_container\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mafter_iteration\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mbst\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mi\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mdtrain\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mevals\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.11/dist-packages/xgboost/core.py\u001b[0m in \u001b[0;36mupdate\u001b[0;34m(self, dtrain, iteration, fobj)\u001b[0m\n\u001b[1;32m   2050\u001b[0m             _check_call(\n\u001b[0;32m-> 2051\u001b[0;31m                 _LIB.XGBoosterUpdateOneIter(\n\u001b[0m\u001b[1;32m   2052\u001b[0m                     \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mhandle\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mctypes\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mc_int\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0miteration\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mdtrain\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mhandle\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mKeyboardInterrupt\u001b[0m: ","\nDuring handling of the above exception, another exception occurred:\n","\u001b[0;31mAttributeError\u001b[0m                            Traceback (most recent call last)","\u001b[0;32m/usr/local/lib/python3.11/dist-packages/IPython/core/interactiveshell.py\u001b[0m in \u001b[0;36mshowtraceback\u001b[0;34m(self, exc_tuple, filename, tb_offset, exception_only, running_compiled_code)\u001b[0m\n\u001b[1;32m   2098\u001b[0m                         \u001b[0;31m# in the engines. This should return a list of strings.\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 2099\u001b[0;31m                         \u001b[0mstb\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mvalue\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_render_traceback_\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   2100\u001b[0m                     \u001b[0;32mexcept\u001b[0m \u001b[0mException\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mAttributeError\u001b[0m: 'KeyboardInterrupt' object has no attribute '_render_traceback_'","\nDuring handling of the above exception, another exception occurred:\n","\u001b[0;31mTypeError\u001b[0m                                 Traceback (most recent call last)","    \u001b[0;31m[... skipping hidden 1 frame]\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.11/dist-packages/IPython/core/interactiveshell.py\u001b[0m in \u001b[0;36mshowtraceback\u001b[0;34m(self, exc_tuple, filename, tb_offset, exception_only, running_compiled_code)\u001b[0m\n\u001b[1;32m   2099\u001b[0m                         \u001b[0mstb\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mvalue\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_render_traceback_\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   2100\u001b[0m                     \u001b[0;32mexcept\u001b[0m \u001b[0mException\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 2101\u001b[0;31m                         stb = self.InteractiveTB.structured_traceback(etype,\n\u001b[0m\u001b[1;32m   2102\u001b[0m                                             value, tb, tb_offset=tb_offset)\n\u001b[1;32m   2103\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.11/dist-packages/IPython/core/ultratb.py\u001b[0m in \u001b[0;36mstructured_traceback\u001b[0;34m(self, etype, value, tb, tb_offset, number_of_lines_of_context)\u001b[0m\n\u001b[1;32m   1365\u001b[0m         \u001b[0;32melse\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1366\u001b[0m             \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mtb\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mtb\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1367\u001b[0;31m         return FormattedTB.structured_traceback(\n\u001b[0m\u001b[1;32m   1368\u001b[0m             self, etype, value, tb, tb_offset, number_of_lines_of_context)\n\u001b[1;32m   1369\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.11/dist-packages/IPython/core/ultratb.py\u001b[0m in \u001b[0;36mstructured_traceback\u001b[0;34m(self, etype, value, tb, tb_offset, number_of_lines_of_context)\u001b[0m\n\u001b[1;32m   1265\u001b[0m         \u001b[0;32mif\u001b[0m \u001b[0mmode\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mverbose_modes\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1266\u001b[0m             \u001b[0;31m# Verbose modes need a full traceback\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1267\u001b[0;31m             return VerboseTB.structured_traceback(\n\u001b[0m\u001b[1;32m   1268\u001b[0m                 \u001b[0mself\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0metype\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mvalue\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mtb\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mtb_offset\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mnumber_of_lines_of_context\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1269\u001b[0m             )\n","\u001b[0;32m/usr/local/lib/python3.11/dist-packages/IPython/core/ultratb.py\u001b[0m in \u001b[0;36mstructured_traceback\u001b[0;34m(self, etype, evalue, etb, tb_offset, number_of_lines_of_context)\u001b[0m\n\u001b[1;32m   1122\u001b[0m         \u001b[0;34m\"\"\"Return a nice text document describing the traceback.\"\"\"\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1123\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1124\u001b[0;31m         formatted_exception = self.format_exception_as_a_whole(etype, evalue, etb, number_of_lines_of_context,\n\u001b[0m\u001b[1;32m   1125\u001b[0m                                                                tb_offset)\n\u001b[1;32m   1126\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.11/dist-packages/IPython/core/ultratb.py\u001b[0m in \u001b[0;36mformat_exception_as_a_whole\u001b[0;34m(self, etype, evalue, etb, number_of_lines_of_context, tb_offset)\u001b[0m\n\u001b[1;32m   1080\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1081\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1082\u001b[0;31m         \u001b[0mlast_unique\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mrecursion_repeat\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mfind_recursion\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0morig_etype\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mevalue\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mrecords\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1083\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1084\u001b[0m         \u001b[0mframes\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mformat_records\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mrecords\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mlast_unique\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mrecursion_repeat\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.11/dist-packages/IPython/core/ultratb.py\u001b[0m in \u001b[0;36mfind_recursion\u001b[0;34m(etype, value, records)\u001b[0m\n\u001b[1;32m    380\u001b[0m     \u001b[0;31m# first frame (from in to out) that looks different.\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    381\u001b[0m     \u001b[0;32mif\u001b[0m \u001b[0;32mnot\u001b[0m \u001b[0mis_recursion_error\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0metype\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mvalue\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mrecords\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 382\u001b[0;31m         \u001b[0;32mreturn\u001b[0m \u001b[0mlen\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mrecords\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;36m0\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    383\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    384\u001b[0m     \u001b[0;31m# Select filename, lineno, func_name to track frames with\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mTypeError\u001b[0m: object of type 'NoneType' has no len()"],"ename":"TypeError","evalue":"object of type 'NoneType' has no len()","output_type":"error"}],"execution_count":11},{"cell_type":"code","source":"#Tried to work with training data only\nfrom sklearn.compose import ColumnTransformer\nfrom sklearn.pipeline import Pipeline\n\n\npreprocessor = ColumnTransformer(\n    transformers=[\n        ('body_vec', TfidfVectorizer(max_features=4000, ngram_range=(1,2)), 'body'),\n        ('rule_vec', TfidfVectorizer(max_features=50, ngram_range=(1,2)), 'rule')\n    ],\n    remainder='drop'\n)\n\n# Create pipeline with preprocessing + model\npipeline = Pipeline([\n    ('tfidf', preprocessor),\n    ('clf', XGBClassifier(use_label_encoder=False, eval_metric='logloss'))\n])\n\n# Fit\npipeline.fit(x_train, y_train)\n\n# Predict\ny_pred = pipeline.predict_proba(x_test)[:,1]\n\nprint(roc_auc_score(y_test,y_pred))","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-09-28T11:42:12.020754Z","iopub.status.idle":"2025-09-28T11:42:12.021150Z","shell.execute_reply.started":"2025-09-28T11:42:12.020929Z","shell.execute_reply":"2025-09-28T11:42:12.020949Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"x_train = df_train_total.drop(columns = ['rule_violation'])\ny_train = df_train_total['rule_violation']\n\nx_test = df_test_total","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-09-28T12:01:11.089886Z","iopub.execute_input":"2025-09-28T12:01:11.090733Z","iopub.status.idle":"2025-09-28T12:01:11.095763Z","shell.execute_reply.started":"2025-09-28T12:01:11.090707Z","shell.execute_reply":"2025-09-28T12:01:11.095046Z"}},"outputs":[],"execution_count":23},{"cell_type":"code","source":"y_train.shape, x_train.shape","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-09-28T11:57:31.915530Z","iopub.execute_input":"2025-09-28T11:57:31.916130Z","iopub.status.idle":"2025-09-28T11:57:31.921941Z","shell.execute_reply.started":"2025-09-28T11:57:31.916099Z","shell.execute_reply":"2025-09-28T11:57:31.921124Z"}},"outputs":[{"execution_count":16,"output_type":"execute_result","data":{"text/plain":"((10145,), (10145, 2))"},"metadata":{}}],"execution_count":16},{"cell_type":"code","source":"# Predict\ny_pred = pipeline.predict_proba(x_test)[:,1]\n\nsubmission = pd.read_csv('/kaggle/input/jigsaw-agile-community-rules/sample_submission.csv')\nsubmission['rule_violation'] = np.round(y_pred,2)\nsubmission.to_csv(\"submission.csv\", index=False, columns=[\"row_id\", \"rule_violation\"])","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-09-28T12:00:08.379134Z","iopub.execute_input":"2025-09-28T12:00:08.379707Z","iopub.status.idle":"2025-09-28T12:00:08.395289Z","shell.execute_reply.started":"2025-09-28T12:00:08.379681Z","shell.execute_reply":"2025-09-28T12:00:08.394430Z"}},"outputs":[{"traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mAttributeError\u001b[0m                            Traceback (most recent call last)","\u001b[0;32m/tmp/ipykernel_36/1931065021.py\u001b[0m in \u001b[0;36m<cell line: 0>\u001b[0;34m()\u001b[0m\n\u001b[1;32m      1\u001b[0m \u001b[0;31m# Predict\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 2\u001b[0;31m \u001b[0my_pred\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mhistory\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mpredict_proba\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mx_test\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;36m1\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      3\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      4\u001b[0m \u001b[0msubmission\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mpd\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mread_csv\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m'/kaggle/input/jigsaw-agile-community-rules/sample_submission.csv'\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      5\u001b[0m \u001b[0msubmission\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m'rule_violation'\u001b[0m\u001b[0;34m]\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mnp\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mround\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0my_pred\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;36m2\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mAttributeError\u001b[0m: 'History' object has no attribute 'predict_proba'"],"ename":"AttributeError","evalue":"'History' object has no attribute 'predict_proba'","output_type":"error"}],"execution_count":20},{"cell_type":"code","source":"# Predict\ny_pred = model.predict_proba(x_test)[:,1]\n\nsubmission = pd.read_csv('/kaggle/input/jigsaw-agile-community-rules/sample_submission.csv')\nsubmission['rule_violation'] = np.round(y_pred,2)\nsubmission.to_csv(\"submission.csv\", index=False, columns=[\"row_id\", \"rule_violation\"])\nsubmission","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-09-28T12:00:28.952427Z","iopub.execute_input":"2025-09-28T12:00:28.952703Z","iopub.status.idle":"2025-09-28T12:00:28.968636Z","shell.execute_reply.started":"2025-09-28T12:00:28.952683Z","shell.execute_reply":"2025-09-28T12:00:28.967668Z"}},"outputs":[{"traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mAttributeError\u001b[0m                            Traceback (most recent call last)","\u001b[0;32m/tmp/ipykernel_36/26381507.py\u001b[0m in \u001b[0;36m<cell line: 0>\u001b[0;34m()\u001b[0m\n\u001b[1;32m      1\u001b[0m \u001b[0;31m# Predict\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 2\u001b[0;31m \u001b[0my_pred\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mmodel\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mpredict_proba\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mx_test\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;36m1\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      3\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      4\u001b[0m \u001b[0msubmission\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mpd\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mread_csv\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m'/kaggle/input/jigsaw-agile-community-rules/sample_submission.csv'\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      5\u001b[0m \u001b[0msubmission\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m'rule_violation'\u001b[0m\u001b[0;34m]\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mnp\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mround\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0my_pred\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;36m2\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mAttributeError\u001b[0m: 'Functional' object has no attribute 'predict_proba'"],"ename":"AttributeError","evalue":"'Functional' object has no attribute 'predict_proba'","output_type":"error"}],"execution_count":22},{"cell_type":"code","source":"submission","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-09-28T10:17:19.470360Z","iopub.execute_input":"2025-09-28T10:17:19.470985Z","iopub.status.idle":"2025-09-28T10:17:19.479098Z","shell.execute_reply.started":"2025-09-28T10:17:19.470960Z","shell.execute_reply":"2025-09-28T10:17:19.478263Z"}},"outputs":[{"execution_count":126,"output_type":"execute_result","data":{"text/plain":"   row_id  rule_violation\n0    2029            0.63\n1    2030            0.66\n2    2031            0.51\n3    2032            0.70\n4    2033            0.54\n5    2034            0.63\n6    2035            0.41\n7    2036            0.63\n8    2037            0.79\n9    2038            0.41","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>row_id</th>\n      <th>rule_violation</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>2029</td>\n      <td>0.63</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>2030</td>\n      <td>0.66</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>2031</td>\n      <td>0.51</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>2032</td>\n      <td>0.70</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>2033</td>\n      <td>0.54</td>\n    </tr>\n    <tr>\n      <th>5</th>\n      <td>2034</td>\n      <td>0.63</td>\n    </tr>\n    <tr>\n      <th>6</th>\n      <td>2035</td>\n      <td>0.41</td>\n    </tr>\n    <tr>\n      <th>7</th>\n      <td>2036</td>\n      <td>0.63</td>\n    </tr>\n    <tr>\n      <th>8</th>\n      <td>2037</td>\n      <td>0.79</td>\n    </tr>\n    <tr>\n      <th>9</th>\n      <td>2038</td>\n      <td>0.41</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"metadata":{}}],"execution_count":126},{"cell_type":"code","source":"from tensorflow.keras.layers import Dense, Embedding, Concatenate, Input, LSTM\nfrom tensorflow.keras.models import Model\nfrom tensorflow.keras.metrics import AUC\nfrom tensorflow.keras.layers import SimpleRNN, Dense,Reshape, Dropout\nfrom tensorflow.keras.optimizers import Adam\nfrom tensorflow.keras.layers import Attention, Flatten, GlobalAveragePooling1D,BatchNormalization, Bidirectional, Add, GRU\nfrom tensorflow.keras.regularizers import l2\nfrom tensorflow.keras.preprocessing.text import Tokenizer\nfrom keras.utils import pad_sequences","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-09-28T11:56:20.766575Z","iopub.execute_input":"2025-09-28T11:56:20.766838Z","iopub.status.idle":"2025-09-28T11:56:33.249944Z","shell.execute_reply.started":"2025-09-28T11:56:20.766818Z","shell.execute_reply":"2025-09-28T11:56:33.249357Z"}},"outputs":[{"name":"stderr","text":"2025-09-28 11:56:22.346556: E external/local_xla/xla/stream_executor/cuda/cuda_fft.cc:477] Unable to register cuFFT factory: Attempting to register factory for plugin cuFFT when one has already been registered\nWARNING: All log messages before absl::InitializeLog() is called are written to STDERR\nE0000 00:00:1759060582.529432      36 cuda_dnn.cc:8310] Unable to register cuDNN factory: Attempting to register factory for plugin cuDNN when one has already been registered\nE0000 00:00:1759060582.586870      36 cuda_blas.cc:1418] Unable to register cuBLAS factory: Attempting to register factory for plugin cuBLAS when one has already been registered\n","output_type":"stream"}],"execution_count":13},{"cell_type":"code","source":"\ndf_train_total['body'] = preprocessed_training_text\ndf_test_total['body'] = preprocessed_testing_text1  \n\ndf_train_total['rule'] = rule_train\ndf_test_total['rule'] = rule_test\n\nx = df_train_total.drop(columns = ['rule_violation'])\ny = df_train_total['rule_violation']\n\nx_train,x_test,y_train,y_test = train_test_split(x,y,train_size = 0.75, random_state = 42)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-09-28T12:04:06.407360Z","iopub.execute_input":"2025-09-28T12:04:06.407654Z","iopub.status.idle":"2025-09-28T12:04:06.418906Z","shell.execute_reply.started":"2025-09-28T12:04:06.407625Z","shell.execute_reply":"2025-09-28T12:04:06.418244Z"}},"outputs":[{"name":"stderr","text":"/tmp/ipykernel_36/1931941891.py:2: SettingWithCopyWarning: \nA value is trying to be set on a copy of a slice from a DataFrame.\nTry using .loc[row_indexer,col_indexer] = value instead\n\nSee the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n  df_test_total['body'] = preprocessed_testing_text1\n/tmp/ipykernel_36/1931941891.py:5: SettingWithCopyWarning: \nA value is trying to be set on a copy of a slice from a DataFrame.\nTry using .loc[row_indexer,col_indexer] = value instead\n\nSee the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n  df_test_total['rule'] = rule_test\n","output_type":"stream"}],"execution_count":25},{"cell_type":"code","source":"max_word = 3000                  #max word for text     \nnum_word = 100                    #max sequence length \n\ntoken = Tokenizer(num_words = max_word, oov_token='<OOV>')\ntoken.fit_on_texts(preprocessed_training_text)\nmax_length = max(len(i.split()) for i in preprocessed_training_text)\ntraining_sequence = token.texts_to_sequences(preprocessed_training_text)\nx_train = pad_sequences(training_sequence, maxlen=num_word, padding='post')\n\n##training text tokenization and padding\nmax_rule_word = 100               #max word for rule\nnum_word_rule = 100                 #max rule length\n\ntoken_rule = Tokenizer(num_words = max_rule_word, oov_token='<OOV>')\ntoken_rule.fit_on_texts(rule_train)\nmax_length_rule_train = max(len(i.split()) for i in rule_train)\nrule_training_sequence = token_rule.texts_to_sequences(rule_train)\nx_train_rule = pad_sequences(rule_training_sequence, maxlen=num_word_rule, padding='post')\n\n## Text input preprocessing\n\n##text edit\ntext_input = Input(shape=(num_word,))\nembedding = Embedding(input_dim = max_word, output_dim = 128)(text_input)\nx1_text = GRU(64, return_sequences=True)(embedding)\n\n## Rule part\nrule_input = Input(shape=(num_word_rule,))\nembedding = Embedding(input_dim = max_rule_word, output_dim = 128)(rule_input)\nx1_rule = GRU(64, return_sequences=True)(embedding)\n\n# Multi-Head Attention for better context\n#x2 = Attention()([x1, x1])\n#x2 = Add()([x1_text, x1_rule])  # residual connection\n# Pooling to flatten sequence\n#x = GlobalAveragePooling1D()(x2)\n\ncombined = Concatenate()([x1_text, x1_rule])\npooled = GlobalAveragePooling1D()(combined)\nrnn1 = Dense(64, activation='relu', kernel_regularizer=l2(0.5))(pooled)\noutput = Dense(1, activation='sigmoid')(rnn1)\n\nmodel = Model(inputs=[text_input, rule_input], outputs=output)\nadam = Adam(learning_rate = 0.001)\nmodel.compile(optimizer=adam, loss='binary_crossentropy', metrics=[AUC(curve='ROC', name='roc_auc')])\n\nhistory = model.fit(\n    [x_train, x_train_rule],\n    y_train,\n    epochs=25, batch_size=64, verbose = 2,\n)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-09-28T12:04:09.879190Z","iopub.execute_input":"2025-09-28T12:04:09.879484Z","iopub.status.idle":"2025-09-28T12:04:10.422022Z","shell.execute_reply.started":"2025-09-28T12:04:09.879463Z","shell.execute_reply":"2025-09-28T12:04:10.421138Z"}},"outputs":[{"traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mValueError\u001b[0m                                Traceback (most recent call last)","\u001b[0;32m/tmp/ipykernel_36/800317305.py\u001b[0m in \u001b[0;36m<cell line: 0>\u001b[0;34m()\u001b[0m\n\u001b[1;32m     45\u001b[0m \u001b[0mmodel\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mcompile\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0moptimizer\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0madam\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mloss\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;34m'binary_crossentropy'\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mmetrics\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mAUC\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mcurve\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;34m'ROC'\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mname\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;34m'roc_auc'\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     46\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 47\u001b[0;31m history = model.fit(\n\u001b[0m\u001b[1;32m     48\u001b[0m     \u001b[0;34m[\u001b[0m\u001b[0mx_train\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mx_train_rule\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     49\u001b[0m     \u001b[0my_train\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.11/dist-packages/keras/src/utils/traceback_utils.py\u001b[0m in \u001b[0;36merror_handler\u001b[0;34m(*args, **kwargs)\u001b[0m\n\u001b[1;32m    120\u001b[0m             \u001b[0;31m# To get the full stack trace, call:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    121\u001b[0m             \u001b[0;31m# `keras.config.disable_traceback_filtering()`\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 122\u001b[0;31m             \u001b[0;32mraise\u001b[0m \u001b[0me\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mwith_traceback\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mfiltered_tb\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;32mfrom\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    123\u001b[0m         \u001b[0;32mfinally\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    124\u001b[0m             \u001b[0;32mdel\u001b[0m \u001b[0mfiltered_tb\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.11/dist-packages/keras/src/trainers/data_adapters/data_adapter_utils.py\u001b[0m in \u001b[0;36mcheck_data_cardinality\u001b[0;34m(data)\u001b[0m\n\u001b[1;32m    113\u001b[0m             )\n\u001b[1;32m    114\u001b[0m             \u001b[0mmsg\u001b[0m \u001b[0;34m+=\u001b[0m \u001b[0;34mf\"'{label}' sizes: {sizes}\\n\"\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 115\u001b[0;31m         \u001b[0;32mraise\u001b[0m \u001b[0mValueError\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mmsg\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    116\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    117\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mValueError\u001b[0m: Data cardinality is ambiguous. Make sure all arrays contain the same number of samples.'x' sizes: 10145, 10145\n'y' sizes: 7608\n"],"ename":"ValueError","evalue":"Data cardinality is ambiguous. Make sure all arrays contain the same number of samples.'x' sizes: 10145, 10145\n'y' sizes: 7608\n","output_type":"error"}],"execution_count":26},{"cell_type":"code","source":"print(x_train.shape, x_train_rule.shape, y_train.shape)","metadata":{"trusted":true,"execution":{"execution_failed":"2025-09-28T11:41:12.904Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"","metadata":{"trusted":true},"outputs":[],"execution_count":null}]}
{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.11.13","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"none","dataSources":[{"sourceId":94635,"databundleVersionId":13121456,"sourceType":"competition"}],"dockerImageVersionId":31089,"isInternetEnabled":false,"language":"python","sourceType":"notebook","isGpuEnabled":false}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"code","source":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle/python Docker image: https://github.com/kaggle/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)\npd.set_option('display.max_columns', None)\npd.set_option('display.max_colwidth',None)\nimport re\nimport nltk\nfrom nltk.stem import WordNetLemmatizer\nfrom sklearn.model_selection import train_test_split\nfrom tensorflow.keras.layers import Dense, Embedding, Concatenate, Input, LSTM\nfrom tensorflow.keras.models import Model\nfrom tensorflow.keras.metrics import AUC\nfrom tensorflow.keras.layers import SimpleRNN, Dense,Reshape, Dropout\nfrom tensorflow.keras.optimizers import Adam\nfrom tensorflow.keras.layers import Attention, Flatten, GlobalAveragePooling1D,BatchNormalization, Bidirectional, Add, GRU\nfrom tensorflow.keras.regularizers import l2\nfrom tensorflow.keras.preprocessing.text import Tokenizer\nfrom keras.utils import pad_sequences\n\n# Input data files are available in the read-only \"../input/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('/kaggle/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (/kaggle/working/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to /kaggle/temp/, but they won't be saved outside of the current session","metadata":{"_uuid":"8f2839f25d086af736a60e9eeb907d3b93b6e0e5","_cell_guid":"b1076dfc-b9ad-4769-8c92-a6c4dae69d19","trusted":true,"execution":{"iopub.status.busy":"2025-08-04T12:06:56.390737Z","iopub.execute_input":"2025-08-04T12:06:56.390969Z","iopub.status.idle":"2025-08-04T12:07:13.301175Z","shell.execute_reply.started":"2025-08-04T12:06:56.390945Z","shell.execute_reply":"2025-08-04T12:07:13.300397Z"}},"outputs":[{"name":"stderr","text":"2025-08-04 12:07:00.690193: E external/local_xla/xla/stream_executor/cuda/cuda_fft.cc:477] Unable to register cuFFT factory: Attempting to register factory for plugin cuFFT when one has already been registered\nWARNING: All log messages before absl::InitializeLog() is called are written to STDERR\nE0000 00:00:1754309220.923258      36 cuda_dnn.cc:8310] Unable to register cuDNN factory: Attempting to register factory for plugin cuDNN when one has already been registered\nE0000 00:00:1754309220.990998      36 cuda_blas.cc:1418] Unable to register cuBLAS factory: Attempting to register factory for plugin cuBLAS when one has already been registered\n","output_type":"stream"},{"name":"stdout","text":"/kaggle/input/jigsaw-agile-community-rules/sample_submission.csv\n/kaggle/input/jigsaw-agile-community-rules/train.csv\n/kaggle/input/jigsaw-agile-community-rules/test.csv\n","output_type":"stream"}],"execution_count":1},{"cell_type":"code","source":"combined_stopwords = {\"'d\", \"'ll\", \"'m\", \"'re\", \"'s\",\n \"'ve\",\n 'a',\n 'about',\n 'above',\n 'across',\n 'after',\n 'afterwards',\n 'again',\n 'against',\n 'ain',\n 'all',\n 'almost',\n 'alone',\n 'along',\n 'already',\n 'also',\n 'although',\n 'always',\n 'am',\n 'among',\n 'amongst',\n 'amount',\n 'an',\n 'and',\n 'another',\n 'any',\n 'anyhow',\n 'anyone',\n 'anything',\n 'anyway',\n 'anywhere',\n 'are',\n 'aren',\n \"aren't\",\n 'around',\n 'as',\n 'at',\n 'back',\n 'be',\n 'became',\n 'because',\n 'become',\n 'becomes',\n 'becoming',\n 'been',\n 'before',\n 'beforehand',\n 'behind',\n 'being',\n 'below',\n 'beside',\n 'besides',\n 'between',\n 'beyond',\n 'both',\n 'bottom',\n 'but',\n 'by',\n 'ca',\n 'call',\n 'can',\n 'cannot',\n 'could',\n 'couldn',\n \"couldn't\",\n 'd',\n 'did',\n 'didn',\n \"didn't\",\n 'do',\n 'does',\n 'doesn',\n \"doesn't\",\n 'doing',\n 'don',\n \"don't\",\n 'done',\n 'down',\n 'due',\n 'during',\n 'each',\n 'eight',\n 'either',\n 'eleven',\n 'else',\n 'elsewhere',\n 'empty',\n 'enough',\n 'even',\n 'ever',\n 'every',\n 'everyone',\n 'everything',\n 'everywhere',\n 'except',\n 'few',\n 'fifteen',\n 'fifty',\n 'first',\n 'five',\n 'for',\n 'former',\n 'formerly',\n 'forty',\n 'four',\n 'from',\n 'front',\n 'full',\n 'further',\n 'get',\n 'give',\n 'go',\n 'had',\n 'hadn',\n \"hadn't\",\n 'has',\n 'hasn',\n \"hasn't\",\n 'have',\n 'haven',\n \"haven't\",\n 'having',\n 'he',\n \"he'd\",\n \"he'll\",\n \"he's\",\n 'hence',\n 'her',\n 'here',\n 'hereafter',\n 'hereby',\n 'herein',\n 'hereupon',\n 'hers',\n 'herself',\n 'him',\n 'himself',\n 'his',\n 'how',\n 'however',\n 'hundred',\n 'i',\n \"i'd\",\n \"i'll\",\n \"i'm\",\n \"i've\",\n 'if',\n 'in',\n 'indeed',\n 'into',\n 'is',\n 'isn',\n \"isn't\",\n 'it',\n \"it'd\",\n \"it'll\",\n \"it's\",\n 'its',\n 'itself',\n 'just',\n 'keep',\n 'last',\n 'latter',\n 'latterly',\n 'least',\n 'less',\n 'll',\n 'm',\n 'ma',\n 'made',\n 'make',\n 'many',\n 'may',\n 'me',\n 'meanwhile',\n 'might',\n 'mightn',\n \"mightn't\",\n 'mine',\n 'more',\n 'moreover',\n 'most',\n 'mostly',\n 'move',\n 'much',\n 'must',\n 'mustn',\n \"mustn't\",\n 'my',\n 'myself',\n \"n't\",\n 'name',\n 'namely',\n 'needn',\n \"needn't\",\n 'neither',\n 'never',\n 'nevertheless',\n 'next',\n 'nine',\n 'no',\n 'nobody',\n 'none',\n 'noone',\n 'nor',\n 'not',\n 'nothing',\n 'now',\n 'nowhere',\n 'n‘t',\n 'n’t',\n 'o',\n 'of',\n 'off',\n 'often',\n 'on',\n 'once',\n 'one',\n 'only',\n 'onto',\n 'or',\n 'other',\n 'others',\n 'otherwise',\n 'our',\n 'ours',\n 'ourselves',\n 'out',\n 'over',\n 'own',\n 'part',\n 'per',\n 'perhaps',\n 'please',\n 'put',\n 'quite',\n 'rather',\n 're',\n 'really',\n 'regarding',\n 's',\n 'same',\n 'say',\n 'see',\n 'seem',\n 'seemed',\n 'seeming',\n 'seems',\n 'serious',\n 'several',\n 'shan',\n \"shan't\",\n 'she',\n \"she'd\",\n \"she'll\",\n \"she's\",\n 'should',\n \"should've\",\n 'shouldn',\n \"shouldn't\",\n 'show',\n 'side',\n 'since',\n 'six',\n 'sixty',\n 'so',\n 'some',\n 'somehow',\n 'someone',\n 'something',\n 'sometime',\n 'sometimes',\n 'somewhere',\n 'still',\n 'such',\n 't',\n 'take',\n 'ten',\n 'than',\n 'that',\n \"that'll\",\n 'the',\n 'their',\n 'theirs',\n 'them',\n 'themselves',\n 'then',\n 'thence',\n 'there',\n 'thereafter',\n 'thereby',\n 'therefore',\n 'therein',\n 'thereupon',\n 'these',\n 'they',\n \"they'd\",\n \"they'll\",\n \"they're\",\n \"they've\",\n 'third',\n 'this',\n 'those',\n 'though',\n 'three',\n 'through',\n 'throughout',\n 'thru',\n 'thus',\n 'to',\n 'together',\n 'too',\n 'top',\n 'toward',\n 'towards',\n 'twelve',\n 'twenty',\n 'two',\n 'under',\n 'unless',\n 'until',\n 'up',\n 'upon',\n 'us',\n 'used',\n 'using',\n 'various',\n 've',\n 'very',\n 'via',\n 'was',\n 'wasn',\n \"wasn't\",\n 'we',\n \"we'd\",\n \"we'll\",\n \"we're\",\n \"we've\",\n 'well',\n 'were',\n 'weren',\n \"weren't\",\n 'what',\n 'whatever',\n 'when',\n 'whence',\n 'whenever',\n 'where',\n 'whereafter',\n 'whereas',\n 'whereby',\n 'wherein',\n 'whereupon',\n 'wherever',\n 'whether',\n 'which',\n 'while',\n 'whither',\n 'who',\n 'whoever',\n 'whole',\n 'whom',\n 'whose',\n 'why',\n 'will',\n 'with',\n 'within',\n 'without',\n 'won',\n \"won't\",\n 'would',\n 'wouldn',\n \"wouldn't\",\n 'y',\n 'yet',\n 'you',\n \"you'd\",\n \"you'll\",\n \"you're\",\n \"you've\",\n 'your',\n 'yours',\n 'yourself',\n 'yourselves',\n '‘d',\n '‘ll',\n '‘m',\n '‘re',\n '‘s',\n '‘ve',\n '’d',\n '’ll',\n '’m',\n '’re',\n '’s',\n '’ve'}","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-08-04T12:07:13.302028Z","iopub.execute_input":"2025-08-04T12:07:13.302600Z","iopub.status.idle":"2025-08-04T12:07:13.315661Z","shell.execute_reply.started":"2025-08-04T12:07:13.302571Z","shell.execute_reply":"2025-08-04T12:07:13.314973Z"},"jupyter":{"source_hidden":true}},"outputs":[],"execution_count":2},{"cell_type":"code","source":"df_train = pd.read_csv('/kaggle/input/jigsaw-agile-community-rules/train.csv')\ndf_test = pd.read_csv('/kaggle/input/jigsaw-agile-community-rules/test.csv')\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-08-04T12:08:47.808893Z","iopub.execute_input":"2025-08-04T12:08:47.809190Z","iopub.status.idle":"2025-08-04T12:08:47.874585Z","shell.execute_reply.started":"2025-08-04T12:08:47.809167Z","shell.execute_reply":"2025-08-04T12:08:47.873806Z"}},"outputs":[],"execution_count":3},{"cell_type":"code","source":"def dataset_basics(df):\n    print(f'Number of empty rows \\n {df_train.isna().sum()} \\n')\n    print(f'Number of duplicate rows {df.duplicated().sum()} \\n')\n    print(f'\\n Dtypes and other info \\n {df.info()} \\n')\n    print(f'Shape of the dataframe {df.shape}')\n    print(f'no_of unique subreddits',df['subreddit'].nunique())\n    print(f'Percent of 0s and 1s: ',df['rule_violation'].value_counts()/df_train.shape[0] * 100)\ndataset_basics(df_train)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-08-04T12:09:02.232694Z","iopub.execute_input":"2025-08-04T12:09:02.233541Z","iopub.status.idle":"2025-08-04T12:09:02.276948Z","shell.execute_reply.started":"2025-08-04T12:09:02.233505Z","shell.execute_reply":"2025-08-04T12:09:02.275953Z"}},"outputs":[{"name":"stdout","text":"Number of empty rows \n row_id                0\nbody                  0\nrule                  0\nsubreddit             0\npositive_example_1    0\npositive_example_2    0\nnegative_example_1    0\nnegative_example_2    0\nrule_violation        0\ndtype: int64 \n\nNumber of duplicate rows 0 \n\n<class 'pandas.core.frame.DataFrame'>\nRangeIndex: 2029 entries, 0 to 2028\nData columns (total 9 columns):\n #   Column              Non-Null Count  Dtype \n---  ------              --------------  ----- \n 0   row_id              2029 non-null   int64 \n 1   body                2029 non-null   object\n 2   rule                2029 non-null   object\n 3   subreddit           2029 non-null   object\n 4   positive_example_1  2029 non-null   object\n 5   positive_example_2  2029 non-null   object\n 6   negative_example_1  2029 non-null   object\n 7   negative_example_2  2029 non-null   object\n 8   rule_violation      2029 non-null   int64 \ndtypes: int64(2), object(7)\nmemory usage: 142.8+ KB\n\n Dtypes and other info \n None \n\nShape of the dataframe (2029, 9)\nno_of unique subreddits 100\nPercent of 0s and 1s:  rule_violation\n1    50.813208\n0    49.186792\nName: count, dtype: float64\n","output_type":"stream"}],"execution_count":4},{"cell_type":"code","source":"def training_data_prep(dataframe):\n    df = dataframe['rule'].str.split(',',expand=True)\n    df.fillna('0',inplace=True)\n    df.columns = ['rule 1','rule 2','rule 3','rule 4']\n    ## till here it works perfectly\n    df['rule 2'] = df['rule 2'].apply(lambda x : 1 if 'referral links' in str(x).lower() else 0)\n    df = df.rename(columns = {'rule 2':'referral link allowed'})\n    #column 0 (legal_advice)\n    df['legal_advice_allowed'] = df['rule 1'].apply(lambda x: 0 if 'legal' in str(x).lower() else 1)\n    #column 1\n    df['rule 4'] = df['rule 4'].apply(lambda x: 0 if 'promotional' in str(x).lower() else 1)\n    df = df.rename(columns = {'rule 4':'Promotions allowed'})\n    ##column 1: advertising\n    df['rule 3'] = df['rule 3'].apply(lambda x: 0 if 'advertising' in str(x).lower() else 1)\n    df = df.rename(columns = {'rule 3':'Advertising allowed'})\n    ## Dealing with  spam part using new created dataframe\n    df_1 = df['rule 1'].str.split(':',expand=True)\n    df = df.drop(columns = ['rule 1'])\n\n    df_1.columns = ['Advert','spam']\n    df_1 = df_1.drop(columns = ['Advert'])\n    \n    df_1['spam allowed'] = df_1['spam'].apply(lambda x: 0 if 'spam' in str(x).lower() else 1)\n    df['spam allowed'] = df_1['spam allowed']\n    ## Double checked with  original dataframe, works fine till here.\n\n    for i in df.columns:\n        dataframe[i] = df[i]\n\n    ##making this part custom since testing part doesn't have rule_violation part\n        \n    df_original = dataframe[['body', 'rule_violation','referral link allowed', 'Advertising allowed',\n           'Promotions allowed', 'legal_advice_allowed', 'spam allowed']]\n    \n    df_p1 = dataframe[['positive_example_1','rule_violation','referral link allowed', 'Advertising allowed',\n               'Promotions allowed', 'legal_advice_allowed', 'spam allowed']]\n    df_p1.loc[:,'rule_violation'] = 0\n    df_p1 = df_p1.rename(columns = {'positive_example_1':'body'})\n        \n    df_p2 = dataframe[['positive_example_2','rule_violation','referral link allowed', 'Advertising allowed',\n               'Promotions allowed', 'legal_advice_allowed', 'spam allowed']]\n    df_p2.loc[:,'rule_violation'] = 0\n    df_p2 = df_p2.rename(columns = {'positive_example_2':'body'})\n        \n    df_n1 = dataframe[['negative_example_1','rule_violation','referral link allowed', 'Advertising allowed',\n               'Promotions allowed', 'legal_advice_allowed', 'spam allowed']]\n    df_n1.loc[:,'rule_violation'] = 1\n    df_n1 = df_n1.rename(columns = {'negative_example_1':'body'})\n        \n    df_n2 = dataframe[['negative_example_2','rule_violation','referral link allowed', 'Advertising allowed',\n               'Promotions allowed', 'legal_advice_allowed', 'spam allowed']]\n    df_n2.loc[:,'rule_violation'] = 1\n    df_n2 = df_n2.rename(columns = {'negative_example_2':'body'})\n    \n    df_total = pd.concat([df_original,df_p1,df_p2,df_n1,df_n2], axis = 0,ignore_index=True)\n\n    text_file = df_total['body'].to_list()\n    \n    pattern = re.compile('https?:\\/\\/\\S+|www\\.\\S+|Https?:\\/\\/\\S+|\\S+\\.com\\S+|\\S+\\.com|\\[.*?\\]|\\S+ \\. com.*')   ## Removing URLs\n    for i in range(len(text_file)):\n        text_file[i] = pattern.sub(r'',text_file[i])\n    \n    pattern = re.compile('<.*?>')       ##Removing HTML rags\n    for i in range(len(text_file)):\n        text_file[i] = pattern.sub(r'',text_file[i]) \n    \n    pattern = re.compile('#\\S+|@\\S+|\\S+\\@\\S+|\\S+@')             ## Removing Emails and Hashtags\n    for i in range(len(text_file)):\n        text_file[i] = pattern.sub(r'',text_file[i])            ### Removing username and subreddit mentions\n    \n    pattern = re.compile('u\\/\\S+|r\\/\\S+')\n    for i in range(len(text_file)):\n        text_file[i] = pattern.sub(r'',text_file[i])\n        \n    pattern = re.compile(\"[\"\n                           u\"\\U0001F600-\\U0001F64F\"  # emoticons\n                           u\"\\U0001F300-\\U0001F5FF\"  # symbols & pictographs\n                           u\"\\U0001F680-\\U0001F6FF\"  # transport & map symbols\n                           u\"\\U0001F1E0-\\U0001F1FF\"  # flags (iOS)\n                           u\"\\U00002702-\\U000027B0\"\n                           u\"\\U000024C2-\\U0001F251\"\n                           \"]+\", flags=re.UNICODE)\n    for i in range(len(text_file)):\n        text_file[i] = pattern.sub(r'',text_file[i])\n\n    pattern = re.compile('\\d|\\\\n')             ##Removing Numbers & \\n spaces\n    for i in range(len(text_file)):\n        text_file[i] = pattern.sub(r'',text_file[i])\n\n\n    ## Works perfectly\n\n    x = df_total.drop(columns = ['rule_violation'])\n    y = df_total['rule_violation']\n\n    x = x.drop(columns = ['body'])\n    \n    lemmatizer = WordNetLemmatizer()\n\n    cleaned_text = []\n    preprocessed_training_text = []\n    for i in range(len(x)):\n        text1 = re.sub('[^a-zA-Z]',' ',text_file[i])\n        text1 = text1.lower()\n        text1 = [lemmatizer.lemmatize(word) for word in text1 if word not in combined_stopwords]\n        cleaned_text = ''.join(text1)\n        preprocessed_training_text.append(cleaned_text)\n    \n\n    return x,y,preprocessed_training_text\n\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-08-04T12:09:02.496730Z","iopub.execute_input":"2025-08-04T12:09:02.497043Z","iopub.status.idle":"2025-08-04T12:09:02.516646Z","shell.execute_reply.started":"2025-08-04T12:09:02.497019Z","shell.execute_reply":"2025-08-04T12:09:02.515824Z"}},"outputs":[],"execution_count":5},{"cell_type":"code","source":"def testing_data_prep(dataframe):\n    df = dataframe['rule'].str.split(',',expand=True)\n    df.fillna('0',inplace=True)\n    df.columns = ['rule 1','rule 2','rule 3','rule 4']\n    ## till here it works perfectly\n    df['rule 2'] = df['rule 2'].apply(lambda x : 1 if 'referral links' in str(x).lower() else 0)\n    df = df.rename(columns = {'rule 2':'referral link allowed'})\n    #column 0 (legal_advice)\n    df['legal_advice_allowed'] = df['rule 1'].apply(lambda x: 0 if 'legal' in str(x).lower() else 1)\n    #column 1\n    df['rule 4'] = df['rule 4'].apply(lambda x: 0 if 'promotional' in str(x).lower() else 1)\n    df = df.rename(columns = {'rule 4':'Promotions allowed'})\n    ##column 1: advertising\n    df['rule 3'] = df['rule 3'].apply(lambda x: 0 if 'advertising' in str(x).lower() else 1)\n    df = df.rename(columns = {'rule 3':'Advertising allowed'})\n    ## Dealing with  spam part using new created dataframe\n    df_1 = df['rule 1'].str.split(':',expand=True)\n    df = df.drop(columns = ['rule 1'])\n\n    df_1.columns = ['Advert','spam']\n    df_1 = df_1.drop(columns = ['Advert'])\n    \n    df_1['spam allowed'] = df_1['spam'].apply(lambda x: 0 if 'spam' in str(x).lower() else 1)\n    df['spam allowed'] = df_1['spam allowed']\n    ## Double checked with  original dataframe, works fine till here.\n\n    for i in df.columns:\n        dataframe[i] = df[i]\n    \n    df_total = dataframe[['body','referral link allowed', 'Advertising allowed',\n           'Promotions allowed', 'legal_advice_allowed', 'spam allowed']]        \n\n    ## Till here, everything works fine as well, tested properly.\n    \n    text_file = df_total['body'].to_list()\n    \n    pattern = re.compile('https?:\\/\\/\\S+|www\\.\\S+|Https?:\\/\\/\\S+|\\S+\\.com\\S+|\\S+\\.com|\\[.*?\\]|\\S+ \\. com.*')   ## Removing URLs\n    for i in range(len(text_file)):\n        text_file[i] = pattern.sub(r'',text_file[i])\n    \n    pattern = re.compile('<.*?>')       ##Removing HTML rags\n    for i in range(len(text_file)):\n        text_file[i] = pattern.sub(r'',text_file[i]) \n    \n    pattern = re.compile('#\\S+|@\\S+|\\S+\\@\\S+|\\S+@')             ## Removing Emails and Hashtags\n    for i in range(len(text_file)):\n        text_file[i] = pattern.sub(r'',text_file[i])            ### Removing username and subreddit mentions\n    \n    pattern = re.compile('u\\/\\S+|r\\/\\S+')\n    for i in range(len(text_file)):\n        text_file[i] = pattern.sub(r'',text_file[i])\n        \n    pattern = re.compile(\"[\"\n                           u\"\\U0001F600-\\U0001F64F\"  # emoticons\n                           u\"\\U0001F300-\\U0001F5FF\"  # symbols & pictographs\n                           u\"\\U0001F680-\\U0001F6FF\"  # transport & map symbols\n                           u\"\\U0001F1E0-\\U0001F1FF\"  # flags (iOS)\n                           u\"\\U00002702-\\U000027B0\"\n                           u\"\\U000024C2-\\U0001F251\"\n                           \"]+\", flags=re.UNICODE)\n    for i in range(len(text_file)):\n        text_file[i] = pattern.sub(r'',text_file[i])\n\n    pattern = re.compile('\\d|\\\\n')             ##Removing Numbers & \\n spaces\n    for i in range(len(text_file)):\n        text_file[i] = pattern.sub(r'',text_file[i])\n\n    lemmatizer = WordNetLemmatizer()\n\n    cleaned_text = []\n    preprocessed_testing_text = []\n    for i in range(len(df_total)):\n        text1 = re.sub('[^a-zA-Z]',' ',text_file[i])\n        text1 = text1.lower()\n        text1 = [lemmatizer.lemmatize(word) for word in text1 if word not in combined_stopwords]\n        cleaned_text = ''.join(text1)\n        preprocessed_testing_text.append(cleaned_text)\n    \n    ##Works perfectly fine till now.\n\n    df_total = df_total.drop(columns = ['body'])\n    \n    return df_total,preprocessed_testing_text","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-08-04T12:09:02.736766Z","iopub.execute_input":"2025-08-04T12:09:02.737039Z","iopub.status.idle":"2025-08-04T12:09:02.748909Z","shell.execute_reply.started":"2025-08-04T12:09:02.737016Z","shell.execute_reply":"2025-08-04T12:09:02.748225Z"}},"outputs":[],"execution_count":6},{"cell_type":"code","source":"x_features,y_target, preprocessed_training_text = training_data_prep(df_train)\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-08-04T12:09:02.944608Z","iopub.execute_input":"2025-08-04T12:09:02.944886Z","iopub.status.idle":"2025-08-04T12:09:09.143509Z","shell.execute_reply.started":"2025-08-04T12:09:02.944863Z","shell.execute_reply":"2025-08-04T12:09:09.142835Z"}},"outputs":[],"execution_count":7},{"cell_type":"code","source":"x_test_features,preprocessed_testing_text = testing_data_prep(df_test)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-08-04T12:09:09.144669Z","iopub.execute_input":"2025-08-04T12:09:09.144896Z","iopub.status.idle":"2025-08-04T12:09:09.160925Z","shell.execute_reply.started":"2025-08-04T12:09:09.144869Z","shell.execute_reply":"2025-08-04T12:09:09.160203Z"}},"outputs":[],"execution_count":8},{"cell_type":"code","source":"token = Tokenizer(num_words = 3000, oov_token='<OOV>')\n##training text tokenization and padding\n\ntoken.fit_on_texts(preprocessed_training_text)\nmax_length = max(len(i.split()) for i in preprocessed_training_text)\ntraining_sequence = token.texts_to_sequences(preprocessed_training_text)\nx_train = pad_sequences(training_sequence, maxlen=max_length, padding='post')\n    \n    ##Testing Text tokenization and padding\n    \ntesting_sequence = token.texts_to_sequences(preprocessed_testing_text)\nx_test = pad_sequences(testing_sequence, maxlen=max_length, padding='post')\n\n    # TENSORFLOW ARCHITECTURE HERE\n    ## Feature dataset input preprocessing\nfeature_input = Input(shape=(5,), name = 'other_feature')\ny = Dense(64, activation='relu', kernel_regularizer=l2(0.5))(feature_input)\ny = BatchNormalization()(y)\ny = Dropout(0.3)(y)\ny = Dense(64, activation='relu')(y)\n#y = Dropout(0.3)(y)\n\n## Text input preprocessing\ntext_input = Input(shape=(83,), name='text_input')\nembedding = Embedding(input_dim = 3000, output_dim = 128)(text_input)\nx1 = GRU(64, return_sequences=True)(embedding)\nx1 = Dropout(0.5)(x1)\nx1 = Dense(32, activation = 'relu', kernel_regularizer=l2(0.5))(x1)\n\n# Multi-Head Attention for better context\nx2 = Attention()([x1, x1])\n\n# Combine Attention output with LSTM via Residual Connection\nx2 = Add()([x1, x2])  # residual connection\n\n# Pooling to flatten sequence\nx = GlobalAveragePooling1D()(x2)\n\n\ncombined = Concatenate()([x,y])\nrnn1 = Dense(64, activation='relu', kernel_regularizer=l2(0.5))(combined)\ndropout2 = Dropout(0.6)(rnn1)\noutput = Dense(1, activation='sigmoid')(dropout2)\n\nmodel = Model(inputs=[text_input, feature_input], outputs=output)\nadam = Adam(learning_rate = 0.001)\nmodel.compile(optimizer=adam, loss='binary_crossentropy', metrics=[AUC(curve='ROC', name='roc_auc')])\n## This architecture achieved loss: 0.4561 - roc_auc: 0.8632 - val_loss: 0.5426 - val_roc_auc: 0.8094 after 20 iterations. \n\nhistory = model.fit(\n    {'text_input': x_train, 'other_feature': x_features},\n    y_target,\n    epochs=25, batch_size=50, verbose = 1,\n)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-08-04T12:18:06.086619Z","iopub.execute_input":"2025-08-04T12:18:06.087376Z","iopub.status.idle":"2025-08-04T12:19:04.398657Z","shell.execute_reply.started":"2025-08-04T12:18:06.087351Z","shell.execute_reply":"2025-08-04T12:19:04.398056Z"}},"outputs":[{"name":"stdout","text":"Epoch 1/25\n\u001b[1m203/203\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m6s\u001b[0m 10ms/step - loss: 36.9116 - roc_auc: 0.5249\nEpoch 2/25\n\u001b[1m203/203\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 11ms/step - loss: 1.9167 - roc_auc: 0.5684\nEpoch 3/25\n\u001b[1m203/203\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 11ms/step - loss: 0.7088 - roc_auc: 0.6629\nEpoch 4/25\n\u001b[1m203/203\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 10ms/step - loss: 0.6395 - roc_auc: 0.7464\nEpoch 5/25\n\u001b[1m203/203\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 11ms/step - loss: 0.5859 - roc_auc: 0.7981\nEpoch 6/25\n\u001b[1m203/203\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 10ms/step - loss: 0.5461 - roc_auc: 0.8283\nEpoch 7/25\n\u001b[1m203/203\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 11ms/step - loss: 0.5360 - roc_auc: 0.8342\nEpoch 8/25\n\u001b[1m203/203\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 10ms/step - loss: 0.5238 - roc_auc: 0.8433\nEpoch 9/25\n\u001b[1m203/203\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 10ms/step - loss: 0.5069 - roc_auc: 0.8568\nEpoch 10/25\n\u001b[1m203/203\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 10ms/step - loss: 0.4839 - roc_auc: 0.8706\nEpoch 11/25\n\u001b[1m203/203\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 10ms/step - loss: 0.4872 - roc_auc: 0.8646\nEpoch 12/25\n\u001b[1m203/203\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 11ms/step - loss: 0.4700 - roc_auc: 0.8729\nEpoch 13/25\n\u001b[1m203/203\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 11ms/step - loss: 0.4790 - roc_auc: 0.8652\nEpoch 14/25\n\u001b[1m203/203\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 10ms/step - loss: 0.4748 - roc_auc: 0.8657\nEpoch 15/25\n\u001b[1m203/203\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 10ms/step - loss: 0.4703 - roc_auc: 0.8694\nEpoch 16/25\n\u001b[1m203/203\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 10ms/step - loss: 0.4683 - roc_auc: 0.8686\nEpoch 17/25\n\u001b[1m203/203\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 11ms/step - loss: 0.4791 - roc_auc: 0.8657\nEpoch 18/25\n\u001b[1m203/203\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 11ms/step - loss: 0.4610 - roc_auc: 0.8779\nEpoch 19/25\n\u001b[1m203/203\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 10ms/step - loss: 0.4550 - roc_auc: 0.8776\nEpoch 20/25\n\u001b[1m203/203\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 10ms/step - loss: 0.4544 - roc_auc: 0.8777\nEpoch 21/25\n\u001b[1m203/203\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 11ms/step - loss: 0.4498 - roc_auc: 0.8804\nEpoch 22/25\n\u001b[1m203/203\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 10ms/step - loss: 0.4456 - roc_auc: 0.8826\nEpoch 23/25\n\u001b[1m203/203\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 10ms/step - loss: 0.4378 - roc_auc: 0.8837\nEpoch 24/25\n\u001b[1m203/203\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 10ms/step - loss: 0.4519 - roc_auc: 0.8773\nEpoch 25/25\n\u001b[1m203/203\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 10ms/step - loss: 0.4328 - roc_auc: 0.8885\n","output_type":"stream"}],"execution_count":14},{"cell_type":"markdown","source":"### ROC_AUC score for training dataset is 0.88.","metadata":{}},{"cell_type":"code","source":"y_pred = model.predict({'text_input': x_test, 'other_feature': x_test_features})\nsubmission = pd.read_csv('/kaggle/input/jigsaw-agile-community-rules/sample_submission.csv')","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-08-04T12:19:30.276528Z","iopub.execute_input":"2025-08-04T12:19:30.277309Z","iopub.status.idle":"2025-08-04T12:19:30.542046Z","shell.execute_reply.started":"2025-08-04T12:19:30.277277Z","shell.execute_reply":"2025-08-04T12:19:30.541462Z"}},"outputs":[{"name":"stdout","text":"\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 207ms/step\n","output_type":"stream"}],"execution_count":15},{"cell_type":"code","source":"y_pred","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-08-04T12:19:31.272169Z","iopub.execute_input":"2025-08-04T12:19:31.272942Z","iopub.status.idle":"2025-08-04T12:19:31.278302Z","shell.execute_reply.started":"2025-08-04T12:19:31.272906Z","shell.execute_reply":"2025-08-04T12:19:31.277613Z"}},"outputs":[{"execution_count":16,"output_type":"execute_result","data":{"text/plain":"array([[0.1375492 ],\n       [0.23781562],\n       [0.14175577],\n       [0.6157875 ],\n       [0.14385392],\n       [0.64204085],\n       [0.8872728 ],\n       [0.6307844 ],\n       [0.8082942 ],\n       [0.1580401 ]], dtype=float32)"},"metadata":{}}],"execution_count":16},{"cell_type":"code","source":"submission.head()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-08-04T12:19:33.956753Z","iopub.execute_input":"2025-08-04T12:19:33.957037Z","iopub.status.idle":"2025-08-04T12:19:33.977065Z","shell.execute_reply.started":"2025-08-04T12:19:33.957015Z","shell.execute_reply":"2025-08-04T12:19:33.976537Z"}},"outputs":[{"execution_count":17,"output_type":"execute_result","data":{"text/plain":"   row_id  rule_violation\n0    2029             0.5\n1    2030             0.5\n2    2031             0.5\n3    2032             0.5\n4    2033             0.5","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>row_id</th>\n      <th>rule_violation</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>2029</td>\n      <td>0.5</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>2030</td>\n      <td>0.5</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>2031</td>\n      <td>0.5</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>2032</td>\n      <td>0.5</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>2033</td>\n      <td>0.5</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"metadata":{}}],"execution_count":17},{"cell_type":"code","source":"type(y_pred)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-08-04T12:19:34.272099Z","iopub.execute_input":"2025-08-04T12:19:34.272329Z","iopub.status.idle":"2025-08-04T12:19:34.277185Z","shell.execute_reply.started":"2025-08-04T12:19:34.272313Z","shell.execute_reply":"2025-08-04T12:19:34.276652Z"}},"outputs":[{"execution_count":18,"output_type":"execute_result","data":{"text/plain":"numpy.ndarray"},"metadata":{}}],"execution_count":18},{"cell_type":"code","source":"submission['rule_violation'] = np.round(y_pred,2)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-08-04T12:19:34.629120Z","iopub.execute_input":"2025-08-04T12:19:34.629388Z","iopub.status.idle":"2025-08-04T12:19:34.633333Z","shell.execute_reply.started":"2025-08-04T12:19:34.629367Z","shell.execute_reply":"2025-08-04T12:19:34.632729Z"}},"outputs":[],"execution_count":19},{"cell_type":"code","source":"submission","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-08-04T12:19:36.484183Z","iopub.execute_input":"2025-08-04T12:19:36.484458Z","iopub.status.idle":"2025-08-04T12:19:36.491788Z","shell.execute_reply.started":"2025-08-04T12:19:36.484438Z","shell.execute_reply":"2025-08-04T12:19:36.491191Z"}},"outputs":[{"execution_count":20,"output_type":"execute_result","data":{"text/plain":"   row_id  rule_violation\n0    2029            0.14\n1    2030            0.24\n2    2031            0.14\n3    2032            0.62\n4    2033            0.14\n5    2034            0.64\n6    2035            0.89\n7    2036            0.63\n8    2037            0.81\n9    2038            0.16","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>row_id</th>\n      <th>rule_violation</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>2029</td>\n      <td>0.14</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>2030</td>\n      <td>0.24</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>2031</td>\n      <td>0.14</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>2032</td>\n      <td>0.62</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>2033</td>\n      <td>0.14</td>\n    </tr>\n    <tr>\n      <th>5</th>\n      <td>2034</td>\n      <td>0.64</td>\n    </tr>\n    <tr>\n      <th>6</th>\n      <td>2035</td>\n      <td>0.89</td>\n    </tr>\n    <tr>\n      <th>7</th>\n      <td>2036</td>\n      <td>0.63</td>\n    </tr>\n    <tr>\n      <th>8</th>\n      <td>2037</td>\n      <td>0.81</td>\n    </tr>\n    <tr>\n      <th>9</th>\n      <td>2038</td>\n      <td>0.16</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"metadata":{}}],"execution_count":20},{"cell_type":"code","source":"submission.to_csv(\"submission.csv\", index=False, columns=[\"row_id\", \"rule_violation\"])","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-08-04T12:19:36.744587Z","iopub.execute_input":"2025-08-04T12:19:36.744848Z","iopub.status.idle":"2025-08-04T12:19:36.753823Z","shell.execute_reply.started":"2025-08-04T12:19:36.744829Z","shell.execute_reply":"2025-08-04T12:19:36.753255Z"}},"outputs":[],"execution_count":21},{"cell_type":"code","source":"","metadata":{"trusted":true},"outputs":[],"execution_count":null}]}
{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.11.13","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"none","dataSources":[{"sourceId":94635,"databundleVersionId":13121456,"sourceType":"competition"}],"dockerImageVersionId":31089,"isInternetEnabled":true,"language":"python","sourceType":"notebook","isGpuEnabled":false}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"code","source":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle/python Docker image: https://github.com/kaggle/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)\npd.set_option('display.max_columns', None)\npd.set_option('display.max_colwidth',None)\nimport re\n## Now tokenization\nfrom tensorflow.keras.preprocessing.text import Tokenizer\nfrom keras.utils import pad_sequences\nimport nltk\nnltk.download('stopwords')\nfrom nltk.corpus import stopwords\nfrom nltk.stem import WordNetLemmatizer\nimport spacy\nfrom sklearn.model_selection import train_test_split\nfrom tensorflow.keras.layers import Dense, Embedding, Concatenate, Input, LSTM\nfrom tensorflow.keras.models import Model\nfrom tensorflow.keras.metrics import AUC\nfrom tensorflow.keras.layers import SimpleRNN, Dense,Reshape\nfrom tensorflow.keras.optimizers import Adam\nfrom tensorflow.keras.layers import Attention, Flatten, GlobalAveragePooling1D,BatchNormalization, LayerNormalization, Bidirectional, MultiHeadAttention, Add\n\n# Input data files are available in the read-only \"../input/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('/kaggle/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (/kaggle/working/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to /kaggle/temp/, but they won't be saved outside of the current session","metadata":{"_uuid":"8f2839f25d086af736a60e9eeb907d3b93b6e0e5","_cell_guid":"b1076dfc-b9ad-4769-8c92-a6c4dae69d19","trusted":true,"execution":{"iopub.status.busy":"2025-08-03T04:05:50.919595Z","iopub.execute_input":"2025-08-03T04:05:50.920026Z","iopub.status.idle":"2025-08-03T04:06:31.251388Z","shell.execute_reply.started":"2025-08-03T04:05:50.919990Z","shell.execute_reply":"2025-08-03T04:06:31.249547Z"}},"outputs":[{"name":"stderr","text":"2025-08-03 04:05:55.827145: E external/local_xla/xla/stream_executor/cuda/cuda_fft.cc:477] Unable to register cuFFT factory: Attempting to register factory for plugin cuFFT when one has already been registered\nWARNING: All log messages before absl::InitializeLog() is called are written to STDERR\nE0000 00:00:1754193956.169110      36 cuda_dnn.cc:8310] Unable to register cuDNN factory: Attempting to register factory for plugin cuDNN when one has already been registered\nE0000 00:00:1754193956.259409      36 cuda_blas.cc:1418] Unable to register cuBLAS factory: Attempting to register factory for plugin cuBLAS when one has already been registered\n[nltk_data] Downloading package stopwords to /usr/share/nltk_data...\n[nltk_data]   Package stopwords is already up-to-date!\n","output_type":"stream"},{"name":"stdout","text":"/kaggle/input/jigsaw-agile-community-rules/sample_submission.csv\n/kaggle/input/jigsaw-agile-community-rules/train.csv\n/kaggle/input/jigsaw-agile-community-rules/test.csv\n","output_type":"stream"}],"execution_count":1},{"cell_type":"code","source":"nlp = spacy.load(\"en_core_web_sm\")\nspacy_stopwords = nlp.Defaults.stop_words\nnltk_stopwords = set(stopwords.words('english'))","metadata":{"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"df_train = pd.read_csv('/kaggle/input/jigsaw-agile-community-rules/train.csv')\na = pd.read_csv('/kaggle/input/jigsaw-agile-community-rules/test.csv')\n#b = pd.read_csv('/kaggle/input/jigsaw-agile-community-rules/sample_submission.csv')","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-08-03T04:47:27.041559Z","iopub.execute_input":"2025-08-03T04:47:27.041945Z","iopub.status.idle":"2025-08-03T04:47:27.097750Z","shell.execute_reply.started":"2025-08-03T04:47:27.041917Z","shell.execute_reply":"2025-08-03T04:47:27.096199Z"}},"outputs":[],"execution_count":70},{"cell_type":"markdown","source":"### Since testing data has only (10,8) shape. We will report training from MY own training class, then train ALL the training data on that, and then Predict the testing dataframe on that. So code pipelines should be written. ","metadata":{}},{"cell_type":"markdown","source":"## We need to match row_id with Probability of being in one class.","metadata":{}},{"cell_type":"code","source":"a.shape","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-08-03T04:47:27.769814Z","iopub.execute_input":"2025-08-03T04:47:27.770197Z","iopub.status.idle":"2025-08-03T04:47:27.779185Z","shell.execute_reply.started":"2025-08-03T04:47:27.770169Z","shell.execute_reply":"2025-08-03T04:47:27.777120Z"}},"outputs":[{"execution_count":71,"output_type":"execute_result","data":{"text/plain":"(10, 8)"},"metadata":{}}],"execution_count":71},{"cell_type":"code","source":"def dataset_basics(df):\n    print(f'Number of empty rows \\n {df.isna().sum()} \\n')\n    print(f'Number of duplicate rows {df.duplicated().sum()} \\n')\n    print(f'\\n Dtypes and other info \\n {df.info()} \\n')\n    print(f'Shape of the dataframe {df.shape}')\n\ndataset_basics(df_train)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-08-02T16:41:33.798740Z","iopub.execute_input":"2025-08-02T16:41:33.799013Z","iopub.status.idle":"2025-08-02T16:41:33.841595Z","shell.execute_reply.started":"2025-08-02T16:41:33.798986Z","shell.execute_reply":"2025-08-02T16:41:33.840998Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"df_train['subreddit'].nunique()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-08-02T16:41:33.843401Z","iopub.execute_input":"2025-08-02T16:41:33.843921Z","iopub.status.idle":"2025-08-02T16:41:33.849934Z","shell.execute_reply.started":"2025-08-02T16:41:33.843900Z","shell.execute_reply":"2025-08-02T16:41:33.849176Z"}},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":"## There are 100 unique subreddits.","metadata":{}},{"cell_type":"code","source":"df_train['rule_violation'].value_counts()/df_train.shape[0] * 100","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-08-02T16:41:33.850662Z","iopub.execute_input":"2025-08-02T16:41:33.850900Z","iopub.status.idle":"2025-08-02T16:41:33.864715Z","shell.execute_reply.started":"2025-08-02T16:41:33.850883Z","shell.execute_reply":"2025-08-02T16:41:33.864042Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"df_train.head()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-08-03T04:24:36.647513Z","iopub.execute_input":"2025-08-03T04:24:36.647872Z","iopub.status.idle":"2025-08-03T04:24:36.654671Z","shell.execute_reply.started":"2025-08-03T04:24:36.647846Z","shell.execute_reply":"2025-08-03T04:24:36.653556Z"}},"outputs":[],"execution_count":18},{"cell_type":"markdown","source":"## Rule violated vs obeyed ratio is almost 1 to 1.\n\n## Let's prepare the Rules first.","metadata":{}},{"cell_type":"code","source":"a['rule'].str.split(',',expand=True)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-08-03T04:14:50.968977Z","iopub.execute_input":"2025-08-03T04:14:50.969391Z","iopub.status.idle":"2025-08-03T04:14:50.986000Z","shell.execute_reply.started":"2025-08-03T04:14:50.969363Z","shell.execute_reply":"2025-08-03T04:14:50.984567Z"}},"outputs":[{"execution_count":15,"output_type":"execute_result","data":{"text/plain":"                                                        0                1  \\\n0                                    No Advertising: Spam   referral links   \n1  No legal advice: Do not offer or request legal advice.             None   \n2                                    No Advertising: Spam   referral links   \n3                                    No Advertising: Spam   referral links   \n4                                    No Advertising: Spam   referral links   \n5                                    No Advertising: Spam   referral links   \n6                                    No Advertising: Spam   referral links   \n7                                    No Advertising: Spam   referral links   \n8                                    No Advertising: Spam   referral links   \n9                                    No Advertising: Spam   referral links   \n\n                          2                                          3  \n0   unsolicited advertising   and promotional content are not allowed.  \n1                      None                                       None  \n2   unsolicited advertising   and promotional content are not allowed.  \n3   unsolicited advertising   and promotional content are not allowed.  \n4   unsolicited advertising   and promotional content are not allowed.  \n5   unsolicited advertising   and promotional content are not allowed.  \n6   unsolicited advertising   and promotional content are not allowed.  \n7   unsolicited advertising   and promotional content are not allowed.  \n8   unsolicited advertising   and promotional content are not allowed.  \n9   unsolicited advertising   and promotional content are not allowed.  ","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>0</th>\n      <th>1</th>\n      <th>2</th>\n      <th>3</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>No Advertising: Spam</td>\n      <td>referral links</td>\n      <td>unsolicited advertising</td>\n      <td>and promotional content are not allowed.</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>No legal advice: Do not offer or request legal advice.</td>\n      <td>None</td>\n      <td>None</td>\n      <td>None</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>No Advertising: Spam</td>\n      <td>referral links</td>\n      <td>unsolicited advertising</td>\n      <td>and promotional content are not allowed.</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>No Advertising: Spam</td>\n      <td>referral links</td>\n      <td>unsolicited advertising</td>\n      <td>and promotional content are not allowed.</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>No Advertising: Spam</td>\n      <td>referral links</td>\n      <td>unsolicited advertising</td>\n      <td>and promotional content are not allowed.</td>\n    </tr>\n    <tr>\n      <th>5</th>\n      <td>No Advertising: Spam</td>\n      <td>referral links</td>\n      <td>unsolicited advertising</td>\n      <td>and promotional content are not allowed.</td>\n    </tr>\n    <tr>\n      <th>6</th>\n      <td>No Advertising: Spam</td>\n      <td>referral links</td>\n      <td>unsolicited advertising</td>\n      <td>and promotional content are not allowed.</td>\n    </tr>\n    <tr>\n      <th>7</th>\n      <td>No Advertising: Spam</td>\n      <td>referral links</td>\n      <td>unsolicited advertising</td>\n      <td>and promotional content are not allowed.</td>\n    </tr>\n    <tr>\n      <th>8</th>\n      <td>No Advertising: Spam</td>\n      <td>referral links</td>\n      <td>unsolicited advertising</td>\n      <td>and promotional content are not allowed.</td>\n    </tr>\n    <tr>\n      <th>9</th>\n      <td>No Advertising: Spam</td>\n      <td>referral links</td>\n      <td>unsolicited advertising</td>\n      <td>and promotional content are not allowed.</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"metadata":{}}],"execution_count":15},{"cell_type":"code","source":"split_df = df_train['rule'].str.split(',', expand=True)\nsplit_df.fillna('0',inplace=True)\nsplit_df.columns = ['rule 1','rule 2','rule 3','rule 4']\nsplit_df.head()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-08-03T04:29:38.043226Z","iopub.execute_input":"2025-08-03T04:29:38.043663Z","iopub.status.idle":"2025-08-03T04:29:38.066309Z","shell.execute_reply.started":"2025-08-03T04:29:38.043635Z","shell.execute_reply":"2025-08-03T04:29:38.064666Z"}},"outputs":[{"execution_count":32,"output_type":"execute_result","data":{"text/plain":"                                                   rule 1           rule 2  \\\n0                                    No Advertising: Spam   referral links   \n1                                    No Advertising: Spam   referral links   \n2  No legal advice: Do not offer or request legal advice.                0   \n3                                    No Advertising: Spam   referral links   \n4                                    No Advertising: Spam   referral links   \n\n                     rule 3                                     rule 4  \n0   unsolicited advertising   and promotional content are not allowed.  \n1   unsolicited advertising   and promotional content are not allowed.  \n2                         0                                          0  \n3   unsolicited advertising   and promotional content are not allowed.  \n4   unsolicited advertising   and promotional content are not allowed.  ","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>rule 1</th>\n      <th>rule 2</th>\n      <th>rule 3</th>\n      <th>rule 4</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>No Advertising: Spam</td>\n      <td>referral links</td>\n      <td>unsolicited advertising</td>\n      <td>and promotional content are not allowed.</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>No Advertising: Spam</td>\n      <td>referral links</td>\n      <td>unsolicited advertising</td>\n      <td>and promotional content are not allowed.</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>No legal advice: Do not offer or request legal advice.</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>No Advertising: Spam</td>\n      <td>referral links</td>\n      <td>unsolicited advertising</td>\n      <td>and promotional content are not allowed.</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>No Advertising: Spam</td>\n      <td>referral links</td>\n      <td>unsolicited advertising</td>\n      <td>and promotional content are not allowed.</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"metadata":{}}],"execution_count":32},{"cell_type":"code","source":"## Allowed is 1 and forbidden is 0 (Referral links)\nsplit_df['rule 2'] = split_df['rule 2'].apply(lambda x : 1 if 'referral links' in str(x).lower() else 0)\nsplit_df = split_df.rename(columns = {'rule 2':'referral link allowed'})\n\n\n## Allowed is 1 and not allowed is 0. (Legal Advices)\nsplit_df['legal_advice_allowed'] = split_df['rule 1'].apply(lambda x: 0 if 'legal' in str(x).lower() else 1)\n\n\n## Allowed is 1 and not allowed is 0. (promotions) \nsplit_df['rule 4'] = split_df['rule 4'].apply(lambda x: 0 if 'promotional' in str(x).lower() else 1)\nsplit_df = split_df.rename(columns = {'rule 4':'Promotions allowed'})\n\n\n## Allowed is 1 and not allowed is 0. (Advertising) \nsplit_df['rule 3'] = split_df['rule 3'].apply(lambda x: 0 if 'advertising' in str(x).lower() else 1)\nsplit_df = split_df.rename(columns = {'rule 3':'Advertising allowed'})\n\n\n## Allowed is 1 and not allowed is 0. (Spam) \n## Spam 1 doesn't mean that it's allowed. It means that it's not relevant. \n\n## IN following lines, we split dataframe from original to deal with spam part.\nsplit_df_1 = split_df['rule 1'].str.split(':',expand=True)\nsplit_df = split_df.drop(columns = ['rule 1'])\n\nsplit_df_1.columns = ['Advert','spam']\nsplit_df_1 = split_df_1.drop(columns = ['Advert'])\n\nsplit_df_1['spam allowed'] = split_df_1['spam'].apply(lambda x: 0 if 'spam' in str(x).lower() else 1)\nsplit_df['spam allowed'] = split_df_1['spam allowed']","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-08-03T04:29:38.778428Z","iopub.execute_input":"2025-08-03T04:29:38.778912Z","iopub.status.idle":"2025-08-03T04:29:38.814583Z","shell.execute_reply.started":"2025-08-03T04:29:38.778882Z","shell.execute_reply":"2025-08-03T04:29:38.813066Z"}},"outputs":[],"execution_count":33},{"cell_type":"code","source":"","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-08-03T04:28:25.201643Z","iopub.execute_input":"2025-08-03T04:28:25.202002Z","iopub.status.idle":"2025-08-03T04:28:25.213368Z","shell.execute_reply.started":"2025-08-03T04:28:25.201976Z","shell.execute_reply":"2025-08-03T04:28:25.212206Z"}},"outputs":[],"execution_count":27},{"cell_type":"markdown","source":"### Both Legal advice and Spam are mututally exclusive. In model, remember to specify it.","metadata":{}},{"cell_type":"code","source":"split_df.head()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-08-03T04:25:23.326219Z","iopub.execute_input":"2025-08-03T04:25:23.326803Z","iopub.status.idle":"2025-08-03T04:25:23.338217Z","shell.execute_reply.started":"2025-08-03T04:25:23.326766Z","shell.execute_reply":"2025-08-03T04:25:23.336810Z"}},"outputs":[{"execution_count":23,"output_type":"execute_result","data":{"text/plain":"   referral link allowed  Advertising allowed  Promotions allowed  \\\n0                      1                    0                   0   \n1                      1                    0                   0   \n2                      0                    1                   1   \n3                      1                    0                   0   \n4                      1                    0                   0   \n\n   legal_advice_allowed  spam allowed  \n0                     1             0  \n1                     1             0  \n2                     0             1  \n3                     1             0  \n4                     1             0  ","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>referral link allowed</th>\n      <th>Advertising allowed</th>\n      <th>Promotions allowed</th>\n      <th>legal_advice_allowed</th>\n      <th>spam allowed</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>1</td>\n      <td>0</td>\n      <td>0</td>\n      <td>1</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>1</td>\n      <td>0</td>\n      <td>0</td>\n      <td>1</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>0</td>\n      <td>1</td>\n      <td>1</td>\n      <td>0</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>1</td>\n      <td>0</td>\n      <td>0</td>\n      <td>1</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>1</td>\n      <td>0</td>\n      <td>0</td>\n      <td>1</td>\n      <td>0</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"metadata":{}}],"execution_count":23},{"cell_type":"code","source":"df = df_train.copy()\n\nfor i in split_df.columns:\n    df[i] = split_df[i]\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-08-02T16:41:33.918708Z","iopub.execute_input":"2025-08-02T16:41:33.918999Z","iopub.status.idle":"2025-08-02T16:41:33.924330Z","shell.execute_reply.started":"2025-08-02T16:41:33.918979Z","shell.execute_reply":"2025-08-02T16:41:33.923662Z"}},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":"## Rules are preapred. \n\n## Next we work with examples.\n\n## So we have examples of data that violate and those who do not voilate the rule. We can take them in seperate datasets, add target values to them. Concatinate them to original dataset and then using all of that, train our model.\n\n## Let's seperate in the following order\n* ### Original: - df_original \n* ### 1st +ve: - df_p1 \n* ### 2nd +ve: - df_p2 \n* ### 1st -ve: - df_n1 \n* ### 2nd -ve: - df_n2\n\n## Seems all fine.","metadata":{}},{"cell_type":"code","source":"df_original = df[['body', 'rule_violation','referral link allowed', 'Advertising allowed',\n       'Promotions allowed', 'legal_advice_allowed', 'spam allowed']]\n\ndf_p1 = df[['positive_example_1','rule_violation','referral link allowed', 'Advertising allowed',\n       'Promotions allowed', 'legal_advice_allowed', 'spam allowed']]\ndf_p1.loc[:,'rule_violation'] = 0\ndf_p1 = df_p1.rename(columns = {'positive_example_1':'body'})\n\ndf_p2 = df[['positive_example_2','rule_violation','referral link allowed', 'Advertising allowed',\n       'Promotions allowed', 'legal_advice_allowed', 'spam allowed']]\ndf_p2.loc[:,'rule_violation'] = 0\ndf_p2 = df_p2.rename(columns = {'positive_example_2':'body'})\n\ndf_n1 = df[['negative_example_1','rule_violation','referral link allowed', 'Advertising allowed',\n       'Promotions allowed', 'legal_advice_allowed', 'spam allowed']]\ndf_n1.loc[:,'rule_violation'] = 1\ndf_n1 = df_n1.rename(columns = {'negative_example_1':'body'})\n\ndf_n2 = df[['negative_example_2','rule_violation','referral link allowed', 'Advertising allowed',\n       'Promotions allowed', 'legal_advice_allowed', 'spam allowed']]\ndf_n2.loc[:,'rule_violation'] = 1\ndf_n2 = df_n2.rename(columns = {'negative_example_2':'body'})","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-08-02T16:41:33.924979Z","iopub.execute_input":"2025-08-02T16:41:33.925172Z","iopub.status.idle":"2025-08-02T16:41:33.942701Z","shell.execute_reply.started":"2025-08-02T16:41:33.925158Z","shell.execute_reply":"2025-08-02T16:41:33.941789Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"df_total = pd.concat([df_original,df_p1,df_p2,df_n1,df_n2], axis = 0,ignore_index=True)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-08-02T16:41:33.944946Z","iopub.execute_input":"2025-08-02T16:41:33.945193Z","iopub.status.idle":"2025-08-02T16:41:33.950050Z","shell.execute_reply.started":"2025-08-02T16:41:33.945176Z","shell.execute_reply":"2025-08-02T16:41:33.949480Z"}},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":"## Ok, now let's strip comment content and sophisticate it.\n\n### WIll text data have anything to do with numbers. I don't think even if we exclude them, there will be much impact. \n### There are HTML tags as well.\n### So there are links. short advirtisements in brackets. ","metadata":{}},{"cell_type":"code","source":"def preparing_rules(dataframe):\n    df = dataframe['rule'].str.split(',',expand=True)\n    df.fillna('0',inplace=True)\n    df.columns = ['rule 1','rule 2','rule 3','rule 4']\n    ## till here it works perfectly\n    df['rule 2'] = df['rule 2'].apply(lambda x : 1 if 'referral links' in str(x).lower() else 0)\n    df = df.rename(columns = {'rule 2':'referral link allowed'})\n    #column 0 (legal_advice)\n    df['legal_advice_allowed'] = df['rule 1'].apply(lambda x: 0 if 'legal' in str(x).lower() else 1)\n    #column 1\n    df['rule 4'] = df['rule 4'].apply(lambda x: 0 if 'promotional' in str(x).lower() else 1)\n    df = df.rename(columns = {'rule 4':'Promotions allowed'})\n    ##column 1: advertising\n    df['rule 3'] = df['rule 3'].apply(lambda x: 0 if 'advertising' in str(x).lower() else 1)\n    df = df.rename(columns = {'rule 3':'Advertising allowed'})\n    ## Dealing with  spam part using new created dataframe\n    df_1 = df['rule 1'].str.split(':',expand=True)\n    df = df.drop(columns = ['rule 1'])\n\n    df_1.columns = ['Advert','spam']\n    df_1 = df_1.drop(columns = ['Advert'])\n    \n    df_1['spam allowed'] = df_1['spam'].apply(lambda x: 0 if 'spam' in str(x).lower() else 1)\n    df['spam allowed'] = df_1['spam allowed']\n    ## Double checked with  original dataframe, works fine till here.\n\n    for i in df.columns:\n        dataframe[i] = df[i]\n\n    ##making this part custom since testing part doesn't have rule_violation part\n    x = 'rule_violation'\n\n    if x in dataframe.columns: ## This will confirm whether we are in train data or test data\n    \n        df_original = dataframe[['body', 'rule_violation','referral link allowed', 'Advertising allowed',\n           'Promotions allowed', 'legal_advice_allowed', 'spam allowed']]\n    \n        df_p1 = dataframe[['positive_example_1','rule_violation','referral link allowed', 'Advertising allowed',\n               'Promotions allowed', 'legal_advice_allowed', 'spam allowed']]\n        df_p1.loc[:,'rule_violation'] = 0\n        df_p1 = df_p1.rename(columns = {'positive_example_1':'body'})\n        \n        df_p2 = dataframe[['positive_example_2','rule_violation','referral link allowed', 'Advertising allowed',\n               'Promotions allowed', 'legal_advice_allowed', 'spam allowed']]\n        df_p2.loc[:,'rule_violation'] = 0\n        df_p2 = df_p2.rename(columns = {'positive_example_2':'body'})\n        \n        df_n1 = dataframe[['negative_example_1','rule_violation','referral link allowed', 'Advertising allowed',\n               'Promotions allowed', 'legal_advice_allowed', 'spam allowed']]\n        df_n1.loc[:,'rule_violation'] = 1\n        df_n1 = df_n1.rename(columns = {'negative_example_1':'body'})\n        \n        df_n2 = dataframe[['negative_example_2','rule_violation','referral link allowed', 'Advertising allowed',\n               'Promotions allowed', 'legal_advice_allowed', 'spam allowed']]\n        df_n2.loc[:,'rule_violation'] = 1\n        df_n2 = df_n2.rename(columns = {'negative_example_2':'body'})\n    \n        df_total = pd.concat([df_original,df_p1,df_p2,df_n1,df_n2], axis = 0,ignore_index=True)\n\n    else:\n        df_total = dataframe[['body','referral link allowed', 'Advertising allowed',\n           'Promotions allowed', 'legal_advice_allowed', 'spam allowed']]        \n\n    ## Till here, everything works fine as well, tested properly.\n    \n    return df_total\n\n","metadata":{"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"a = preparing_rules(a)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-08-03T05:00:24.274882Z","iopub.execute_input":"2025-08-03T05:00:24.275200Z","iopub.status.idle":"2025-08-03T05:00:24.295033Z","shell.execute_reply.started":"2025-08-03T05:00:24.275180Z","shell.execute_reply":"2025-08-03T05:00:24.293676Z"}},"outputs":[],"execution_count":76},{"cell_type":"code","source":"text1 = df_total['body'].to_list()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-08-02T16:41:33.950777Z","iopub.execute_input":"2025-08-02T16:41:33.951021Z","iopub.status.idle":"2025-08-02T16:41:33.959386Z","shell.execute_reply.started":"2025-08-02T16:41:33.951000Z","shell.execute_reply":"2025-08-02T16:41:33.958891Z"}},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":"### Removing urls","metadata":{}},{"cell_type":"code","source":"def remove_urls(text):\n    pattern = re.compile('https?:\\/\\/\\S+|www\\.\\S+|Https?:\\/\\/\\S+|\\S+\\.com\\S+|\\S+\\.com|\\[.*?\\]|\\S+ \\. com.*')\n    for i in range(len(text)):\n        text[i] = pattern.sub(r'',text[i])\n    return text\n\ntext1 = remove_urls(text1)\n\n##Can be modified\n\n### Removing HTML tags\ndef remove_html(text):\n    pattern = re.compile('<.*?>')\n    for i in range(len(text)):\n        text[i] = pattern.sub(r'',text[i])\n    return text\n\ntext1 = remove_html(text1)\n\n## Works perfectly\n\n\n### Removing Emails and hashtags\n\ndef remove_mail_hashtag(text):\n    pattern = re.compile('#\\S+|@\\S+|\\S+\\@\\S+|\\S+@')\n    for i in range(len(text)):\n        text[i] = pattern.sub(r'',text[i])\n    return text\n\ntext1 = remove_mail_hashtag(text1)\n\n#Works perfectly\n\n### Removing username and subreddit mentions\n\ndef remove_username_subreddit(text):\n    pattern = re.compile('u\\/\\S+|r\\/\\S+')\n    for i in range(len(text)):\n        text[i] = pattern.sub(r'',text[i])\n    return text\n\ntext1 = remove_username_subreddit(text1)\n\n## Works perfectly\n\n### Removing emojis and more alike.\n\ndef remove_emojis(text):\n    pattern = re.compile(\"[\"\n                           u\"\\U0001F600-\\U0001F64F\"  # emoticons\n                           u\"\\U0001F300-\\U0001F5FF\"  # symbols & pictographs\n                           u\"\\U0001F680-\\U0001F6FF\"  # transport & map symbols\n                           u\"\\U0001F1E0-\\U0001F1FF\"  # flags (iOS)\n                           u\"\\U00002702-\\U000027B0\"\n                           u\"\\U000024C2-\\U0001F251\"\n                           \"]+\", flags=re.UNICODE)\n    for i in range(len(text)):\n        text[i] = pattern.sub(r'',text[i])\n    return text\n\ntext1 = remove_emojis(text1)\n\n##Works perfectly\n\n### Removing Numbers & \\n spaces\n\ndef remove_numbers(text):\n    pattern = re.compile('\\d|\\\\n')\n    for i in range(len(text)):\n        text[i] = pattern.sub(r'',text[i])\n    return text\n\ntext12 = remove_numbers(text1)\n\n## Works perfectly since all currency and special characters will be removed afterwards. ","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-08-02T16:41:35.895816Z","iopub.execute_input":"2025-08-02T16:41:35.896088Z","iopub.status.idle":"2025-08-02T16:41:36.322553Z","shell.execute_reply.started":"2025-08-02T16:41:35.896071Z","shell.execute_reply":"2025-08-02T16:41:36.322006Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"##This pipeline cleans all the data\n\ndef cleaning_text_data(dataframe):\n    text_file = dataframe['body'].to_list()\n    \n    pattern = re.compile('https?:\\/\\/\\S+|www\\.\\S+|Https?:\\/\\/\\S+|\\S+\\.com\\S+|\\S+\\.com|\\[.*?\\]|\\S+ \\. com.*')   ## Removing URLs\n    for i in range(len(text_file)):\n        text_file[i] = pattern.sub(r'',text_file[i])\n    \n    pattern = re.compile('<.*?>')       ##Removing HTML rags\n    for i in range(len(text_file)):\n        text_file[i] = pattern.sub(r'',text_file[i]) \n    \n    pattern = re.compile('#\\S+|@\\S+|\\S+\\@\\S+|\\S+@')             ## Removing Emails and Hashtags\n    for i in range(len(text_file)):\n        text_file[i] = pattern.sub(r'',text_file[i])            ### Removing username and subreddit mentions\n    \n    pattern = re.compile('u\\/\\S+|r\\/\\S+')\n    for i in range(len(text_file)):\n        text_file[i] = pattern.sub(r'',text_file[i])\n        \n    pattern = re.compile(\"[\"\n                           u\"\\U0001F600-\\U0001F64F\"  # emoticons\n                           u\"\\U0001F300-\\U0001F5FF\"  # symbols & pictographs\n                           u\"\\U0001F680-\\U0001F6FF\"  # transport & map symbols\n                           u\"\\U0001F1E0-\\U0001F1FF\"  # flags (iOS)\n                           u\"\\U00002702-\\U000027B0\"\n                           u\"\\U000024C2-\\U0001F251\"\n                           \"]+\", flags=re.UNICODE)\n    for i in range(len(text_file)):\n        text_file[i] = pattern.sub(r'',text_file[i])\n\n    pattern = re.compile('\\d|\\\\n')             ##Removing Numbers & \\n spaces\n    for i in range(len(text_file)):\n        text_file[i] = pattern.sub(r'',text_file[i])\n\n    ##Works perfectly fine till now.\n    return text_file","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-08-03T05:00:58.934228Z","iopub.execute_input":"2025-08-03T05:00:58.934753Z","iopub.status.idle":"2025-08-03T05:00:58.948045Z","shell.execute_reply.started":"2025-08-03T05:00:58.934717Z","shell.execute_reply":"2025-08-03T05:00:58.946402Z"}},"outputs":[],"execution_count":78},{"cell_type":"code","source":"len(text12)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-08-02T16:41:37.666866Z","iopub.execute_input":"2025-08-02T16:41:37.667130Z","iopub.status.idle":"2025-08-02T16:41:37.672123Z","shell.execute_reply.started":"2025-08-02T16:41:37.667111Z","shell.execute_reply":"2025-08-02T16:41:37.671351Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"combined_stopwords = spacy_stopwords.union(nltk_stopwords)\nlemmatizer = WordNetLemmatizer()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-08-02T16:41:37.880755Z","iopub.execute_input":"2025-08-02T16:41:37.881011Z","iopub.status.idle":"2025-08-02T16:41:38.610288Z","shell.execute_reply.started":"2025-08-02T16:41:37.880993Z","shell.execute_reply":"2025-08-02T16:41:38.609500Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"df_total.head()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-08-02T16:41:38.611493Z","iopub.execute_input":"2025-08-02T16:41:38.611817Z","iopub.status.idle":"2025-08-02T16:41:38.620195Z","shell.execute_reply.started":"2025-08-02T16:41:38.611791Z","shell.execute_reply":"2025-08-02T16:41:38.619378Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"df_total['body'] = text12\nx = df_total.drop(columns = ['rule_violation'])\ny = df_total['rule_violation']\n\nx_train_pre,x_test_pre,y_train,y_test = train_test_split(x,y,train_size = 0.75, random_state = 42)\n\n\ntraining_text = x_train_pre['body'].to_list()\ntesting_text = x_test_pre['body'].to_list()\n\n\nx_train_pre = x_train_pre.drop(columns = ['body'])\nx_test_pre = x_test_pre.drop(columns = ['body'])","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-08-02T16:41:40.377094Z","iopub.execute_input":"2025-08-02T16:41:40.377359Z","iopub.status.idle":"2025-08-02T16:41:40.389624Z","shell.execute_reply.started":"2025-08-02T16:41:40.377340Z","shell.execute_reply":"2025-08-02T16:41:40.388927Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"##Training data cleaning\n\ncleaned_text = []\npreprocessed_training_text = []\nfor i in range(len(x_train_pre)):\n    text1 = re.sub('[^a-zA-Z]',' ',training_text[i])\n    text1 = text1.lower()\n    text1 = [lemmatizer.lemmatize(word) for word in text1 if word not in combined_stopwords]\n    cleaned_text = ' '.join(text1)\n    preprocessed_training_text.append(cleaned_text)\n\n##Testing data cleaning\n\ncleaned_text1 = []\npreprocessed_testing_text = []\nfor i in range(len(x_test_pre)):\n    text1 = re.sub('[^a-zA-Z]',' ',testing_text[i])\n    text1 = text1.lower()\n    text1 = [lemmatizer.lemmatize(word) for word in text1 if word not in combined_stopwords]\n    cleaned_text1 = ' '.join(text1)\n    preprocessed_testing_text.append(cleaned_text1)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-08-02T16:56:15.613695Z","iopub.execute_input":"2025-08-02T16:56:15.614017Z","iopub.status.idle":"2025-08-02T16:56:18.329864Z","shell.execute_reply.started":"2025-08-02T16:56:15.613994Z","shell.execute_reply":"2025-08-02T16:56:18.329019Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"token = Tokenizer(num_words = 5000, oov_token='<OOV>')\n##training text tokenization and padding\n\ntoken.fit_on_texts(preprocessed_training_text)\nmax_length = max(len(i.split()) for i in preprocessed_training_text)\ntraining_sequence = token.texts_to_sequences(preprocessed_training_text)\nx_train = pad_sequences(training_sequence, maxlen=max_length, padding='post')\n\n\n##Testing Text tokenization and padding\n\ntesting_sequence = token.texts_to_sequences(preprocessed_testing_text)\nx_test = pad_sequences(testing_sequence, maxlen=max_length, padding='post')\nmax_length","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-08-02T16:56:20.245006Z","iopub.execute_input":"2025-08-02T16:56:20.245272Z","iopub.status.idle":"2025-08-02T16:56:20.627209Z","shell.execute_reply.started":"2025-08-02T16:56:20.245252Z","shell.execute_reply":"2025-08-02T16:56:20.626446Z"}},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":"### ROC AUC curve\n","metadata":{}},{"cell_type":"code","source":"## Feature dataset input preprocessing\nfeature_input = Input(shape=(5,), name = 'other_feature')\ny = Dense(64, activation='relu')(feature_input)\ny = BatchNormalization()(y)\ny = Dropout(0.3)(y)\ny = Dense(64, activation='relu')(y)\n\n## Text input preprocessing\ntext_input = Input(shape=(213,), name='text_input')\nembedding = Embedding(input_dim = 5000, output_dim = 128)(text_input)\nx1 = Bidirectional(LSTM(128, return_sequences=True))(embedding)\n\n# Multi-Head Attention for better context\nx2 = MultiHeadAttention(num_heads=4, key_dim=64)(x1, x1)\n\n# Combine Attention output with LSTM via Residual Connection\nx2 = Add()([x1, x2])  # residual connection\n\n# Pooling to flatten sequence\nx = GlobalAveragePooling1D()(x2)\n\n\ncombined = Concatenate()([x,y])\n\n#reshaped = Reshape((48, 4))(combined)\n#reshaped = Reshape((192, 1))(combined)\nrnn1 = Dense(128, activation='relu')(combined)\nrnn2 = Dense(64, activation='relu')(rnn1)\ndense3 = Dense(32, activation='relu')(rnn2)\noutput = Dense(1, activation='sigmoid')(dense3)\n\nmodel = Model(inputs=[text_input, feature_input], outputs=output)\nadam = Adam(learning_rate = 0.001)\nmodel.compile(optimizer=adam, loss='binary_crossentropy', metrics=[AUC(curve='ROC', name='roc_auc')])\n## This architecture achieved loss: 0.4561 - roc_auc: 0.8632 - val_loss: 0.5426 - val_roc_auc: 0.8094 after 20 iterations.","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-08-02T17:06:01.729030Z","iopub.execute_input":"2025-08-02T17:06:01.729561Z","iopub.status.idle":"2025-08-02T17:06:01.861296Z","shell.execute_reply.started":"2025-08-02T17:06:01.729539Z","shell.execute_reply":"2025-08-02T17:06:01.860606Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"\nhistory = model.fit(\n    {'text_input': x_train, 'other_feature': x_train_pre},\n    y_train,\n    epochs=25, validation_data=(\n        {'text_input': x_test, 'other_feature': x_test_pre},\n        y_test\n    ),\n    batch_size=64,verbose = 1,\n)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-08-02T17:06:01.932484Z","iopub.execute_input":"2025-08-02T17:06:01.932709Z","iopub.status.idle":"2025-08-02T17:08:39.476804Z","shell.execute_reply.started":"2025-08-02T17:06:01.932688Z","shell.execute_reply":"2025-08-02T17:08:39.476044Z"}},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":"### This architecture achieved  loss: 0.3812 - roc_auc: 0.9027 - val_loss: 0.5281 - val_roc_auc: 0.8164 after 25 iterations.\n### we can train our model and use out testing data on it. ","metadata":{}},{"cell_type":"code","source":"y_pred = model.predict({'text_input': x_test, 'other_feature': x_test_pre})\nfrom sklearn.metrics import roc_auc_score\nroc_auc_test = roc_auc_score(y_test, y_pred)\nprint(f\"Test ROC-AUC: {roc_auc_test:.4f}\")","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-08-02T16:49:39.144306Z","iopub.execute_input":"2025-08-02T16:49:39.144677Z","iopub.status.idle":"2025-08-02T16:49:40.874013Z","shell.execute_reply.started":"2025-08-02T16:49:39.144648Z","shell.execute_reply":"2025-08-02T16:49:40.873378Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"","metadata":{"trusted":true},"outputs":[],"execution_count":null}]}
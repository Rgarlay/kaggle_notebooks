{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.11.13","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"none","dataSources":[{"sourceId":94635,"databundleVersionId":13121456,"sourceType":"competition"}],"dockerImageVersionId":31089,"isInternetEnabled":true,"language":"python","sourceType":"notebook","isGpuEnabled":false}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"code","source":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle/python Docker image: https://github.com/kaggle/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)\npd.set_option('display.max_columns', None)\npd.set_option('display.max_colwidth',None)\nimport re\n## Now tokenization\nfrom tensorflow.keras.preprocessing.text import Tokenizer\nfrom keras.utils import pad_sequences\nimport nltk\nnltk.download('stopwords')\nfrom nltk.corpus import stopwords\nfrom nltk.stem import WordNetLemmatizer\nimport spacy\nfrom sklearn.model_selection import train_test_split\nfrom tensorflow.keras.layers import Dense, Embedding, Concatenate, Input, LSTM\nfrom tensorflow.keras.models import Model\n\n\n# Input data files are available in the read-only \"../input/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('/kaggle/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (/kaggle/working/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to /kaggle/temp/, but they won't be saved outside of the current session","metadata":{"_uuid":"8f2839f25d086af736a60e9eeb907d3b93b6e0e5","_cell_guid":"b1076dfc-b9ad-4769-8c92-a6c4dae69d19","trusted":true,"execution":{"iopub.status.busy":"2025-07-29T14:05:10.730170Z","iopub.execute_input":"2025-07-29T14:05:10.730452Z","iopub.status.idle":"2025-07-29T14:05:41.592300Z","shell.execute_reply.started":"2025-07-29T14:05:10.730407Z","shell.execute_reply":"2025-07-29T14:05:41.591163Z"}},"outputs":[{"name":"stderr","text":"2025-07-29 14:05:15.040835: E external/local_xla/xla/stream_executor/cuda/cuda_fft.cc:477] Unable to register cuFFT factory: Attempting to register factory for plugin cuFFT when one has already been registered\nWARNING: All log messages before absl::InitializeLog() is called are written to STDERR\nE0000 00:00:1753797915.301441      36 cuda_dnn.cc:8310] Unable to register cuDNN factory: Attempting to register factory for plugin cuDNN when one has already been registered\nE0000 00:00:1753797915.375912      36 cuda_blas.cc:1418] Unable to register cuBLAS factory: Attempting to register factory for plugin cuBLAS when one has already been registered\n[nltk_data] Downloading package stopwords to /usr/share/nltk_data...\n[nltk_data]   Package stopwords is already up-to-date!\n","output_type":"stream"},{"name":"stdout","text":"/kaggle/input/jigsaw-agile-community-rules/sample_submission.csv\n/kaggle/input/jigsaw-agile-community-rules/train.csv\n/kaggle/input/jigsaw-agile-community-rules/test.csv\n","output_type":"stream"}],"execution_count":1},{"cell_type":"code","source":"df_train = pd.read_csv('/kaggle/input/jigsaw-agile-community-rules/train.csv')","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-07-29T14:07:43.656486Z","iopub.execute_input":"2025-07-29T14:07:43.656831Z","iopub.status.idle":"2025-07-29T14:07:43.693960Z","shell.execute_reply.started":"2025-07-29T14:07:43.656805Z","shell.execute_reply":"2025-07-29T14:07:43.693024Z"}},"outputs":[],"execution_count":3},{"cell_type":"markdown","source":"## We need to match row_id with Probability of being in one class.","metadata":{}},{"cell_type":"code","source":"def dataset_basics(df):\n    print(f'Number of empty rows \\n {df.isna().sum()} \\n')\n    print(f'Number of duplicate rows {df.duplicated().sum()} \\n')\n    print(f'\\n Dtypes and other info \\n {df.info()} \\n')\n    print(f'Shape of the dataframe {df.shape}')\n\ndataset_basics(df_train)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-07-29T14:07:51.183003Z","iopub.execute_input":"2025-07-29T14:07:51.183344Z","iopub.status.idle":"2025-07-29T14:07:51.221901Z","shell.execute_reply.started":"2025-07-29T14:07:51.183321Z","shell.execute_reply":"2025-07-29T14:07:51.220927Z"}},"outputs":[{"name":"stdout","text":"Number of empty rows \n row_id                0\nbody                  0\nrule                  0\nsubreddit             0\npositive_example_1    0\npositive_example_2    0\nnegative_example_1    0\nnegative_example_2    0\nrule_violation        0\ndtype: int64 \n\nNumber of duplicate rows 0 \n\n<class 'pandas.core.frame.DataFrame'>\nRangeIndex: 2029 entries, 0 to 2028\nData columns (total 9 columns):\n #   Column              Non-Null Count  Dtype \n---  ------              --------------  ----- \n 0   row_id              2029 non-null   int64 \n 1   body                2029 non-null   object\n 2   rule                2029 non-null   object\n 3   subreddit           2029 non-null   object\n 4   positive_example_1  2029 non-null   object\n 5   positive_example_2  2029 non-null   object\n 6   negative_example_1  2029 non-null   object\n 7   negative_example_2  2029 non-null   object\n 8   rule_violation      2029 non-null   int64 \ndtypes: int64(2), object(7)\nmemory usage: 142.8+ KB\n\n Dtypes and other info \n None \n\nShape of the dataframe (2029, 9)\n","output_type":"stream"}],"execution_count":5},{"cell_type":"code","source":"df_train['subreddit'].nunique()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-07-29T14:07:51.374216Z","iopub.execute_input":"2025-07-29T14:07:51.374664Z","iopub.status.idle":"2025-07-29T14:07:51.381098Z","shell.execute_reply.started":"2025-07-29T14:07:51.374636Z","shell.execute_reply":"2025-07-29T14:07:51.380350Z"}},"outputs":[{"execution_count":6,"output_type":"execute_result","data":{"text/plain":"100"},"metadata":{}}],"execution_count":6},{"cell_type":"markdown","source":"## There are 100 unique subreddits.","metadata":{}},{"cell_type":"code","source":"df_train['rule_violation'].value_counts()/df_train.shape[0] * 100","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-07-29T14:07:51.722836Z","iopub.execute_input":"2025-07-29T14:07:51.723147Z","iopub.status.idle":"2025-07-29T14:07:51.734101Z","shell.execute_reply.started":"2025-07-29T14:07:51.723122Z","shell.execute_reply":"2025-07-29T14:07:51.733134Z"}},"outputs":[{"execution_count":7,"output_type":"execute_result","data":{"text/plain":"rule_violation\n1    50.813208\n0    49.186792\nName: count, dtype: float64"},"metadata":{}}],"execution_count":7},{"cell_type":"markdown","source":"## Rule violated vs obeyed ratio is almost 1 to 1.","metadata":{}},{"cell_type":"markdown","source":"## Let's prepare the Rules first.","metadata":{}},{"cell_type":"code","source":"split_df = df_train['rule'].str.split(',', expand=True)\nsplit_df.fillna('0',inplace=True)\nsplit_df.columns = ['rule 1','rule 2','rule 3','rule 4']\nsplit_df.head()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-07-29T14:07:54.294199Z","iopub.execute_input":"2025-07-29T14:07:54.294555Z","iopub.status.idle":"2025-07-29T14:07:54.311431Z","shell.execute_reply.started":"2025-07-29T14:07:54.294526Z","shell.execute_reply":"2025-07-29T14:07:54.310457Z"}},"outputs":[{"execution_count":8,"output_type":"execute_result","data":{"text/plain":"                                                   rule 1           rule 2  \\\n0                                    No Advertising: Spam   referral links   \n1                                    No Advertising: Spam   referral links   \n2  No legal advice: Do not offer or request legal advice.                0   \n3                                    No Advertising: Spam   referral links   \n4                                    No Advertising: Spam   referral links   \n\n                     rule 3                                     rule 4  \n0   unsolicited advertising   and promotional content are not allowed.  \n1   unsolicited advertising   and promotional content are not allowed.  \n2                         0                                          0  \n3   unsolicited advertising   and promotional content are not allowed.  \n4   unsolicited advertising   and promotional content are not allowed.  ","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>rule 1</th>\n      <th>rule 2</th>\n      <th>rule 3</th>\n      <th>rule 4</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>No Advertising: Spam</td>\n      <td>referral links</td>\n      <td>unsolicited advertising</td>\n      <td>and promotional content are not allowed.</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>No Advertising: Spam</td>\n      <td>referral links</td>\n      <td>unsolicited advertising</td>\n      <td>and promotional content are not allowed.</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>No legal advice: Do not offer or request legal advice.</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>No Advertising: Spam</td>\n      <td>referral links</td>\n      <td>unsolicited advertising</td>\n      <td>and promotional content are not allowed.</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>No Advertising: Spam</td>\n      <td>referral links</td>\n      <td>unsolicited advertising</td>\n      <td>and promotional content are not allowed.</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"metadata":{}}],"execution_count":8},{"cell_type":"code","source":"#a = split_df['rule 2'].str.contains('links', case=False, na=False)\n#split_df.loc[a, 'rule 2']","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-07-29T14:07:54.469994Z","iopub.execute_input":"2025-07-29T14:07:54.470294Z","iopub.status.idle":"2025-07-29T14:07:54.474397Z","shell.execute_reply.started":"2025-07-29T14:07:54.470271Z","shell.execute_reply":"2025-07-29T14:07:54.473494Z"}},"outputs":[],"execution_count":9},{"cell_type":"code","source":"## Allowed is 1 and forbidden is 0 (Referral links)\nsplit_df['rule 2'] = split_df['rule 2'].apply(lambda x : 1 if 'referral links' in str(x).lower() else 0)\nsplit_df = split_df.rename(columns = {'rule 2':'referral link allowed'})\n\n\n## Allowed is 1 and not allowed is 0. (Legal Advices)\nsplit_df['legal_advice_allowed'] = split_df['rule 1'].apply(lambda x: 0 if 'legal' in str(x).lower() else 1)\n\n\n## Allowed is 1 and not allowed is 0. (promotions) \nsplit_df['rule 4'] = split_df['rule 4'].apply(lambda x: 0 if 'promotional' in str(x).lower() else 1)\nsplit_df = split_df.rename(columns = {'rule 4':'Promotions allowed'})\n\n\n## Allowed is 1 and not allowed is 0. (Advertising) \nsplit_df['rule 3'] = split_df['rule 3'].apply(lambda x: 0 if 'advertising' in str(x).lower() else 1)\nsplit_df = split_df.rename(columns = {'rule 3':'Advertising allowed'})\n\n\n## Allowed is 1 and not allowed is 0. (Spam) \n## Spam 1 doesn't mean that it's allowed. It means that it's not relevant. \nsplit_df_1 = split_df['rule 1'].str.split(':',expand=True)\nsplit_df = split_df.drop(columns = ['rule 1'])\n\nsplit_df_1.columns = ['Advert','spam']\nsplit_df_1 = split_df_1.drop(columns = ['Advert'])\n\nsplit_df_1['spam allowed'] = split_df_1['spam'].apply(lambda x: 0 if 'spam' in str(x).lower() else 1)\nsplit_df['spam allowed'] = split_df_1['spam allowed']","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-07-29T14:07:54.642378Z","iopub.execute_input":"2025-07-29T14:07:54.642701Z","iopub.status.idle":"2025-07-29T14:07:54.670886Z","shell.execute_reply.started":"2025-07-29T14:07:54.642679Z","shell.execute_reply":"2025-07-29T14:07:54.669911Z"}},"outputs":[],"execution_count":10},{"cell_type":"markdown","source":"### Both Legal advice and Spam are mututally exclusive. In model, remember to specify it.","metadata":{}},{"cell_type":"code","source":"split_df.head()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-07-29T14:07:56.506300Z","iopub.execute_input":"2025-07-29T14:07:56.506629Z","iopub.status.idle":"2025-07-29T14:07:56.515531Z","shell.execute_reply.started":"2025-07-29T14:07:56.506604Z","shell.execute_reply":"2025-07-29T14:07:56.514660Z"}},"outputs":[{"execution_count":11,"output_type":"execute_result","data":{"text/plain":"   referral link allowed  Advertising allowed  Promotions allowed  \\\n0                      1                    0                   0   \n1                      1                    0                   0   \n2                      0                    1                   1   \n3                      1                    0                   0   \n4                      1                    0                   0   \n\n   legal_advice_allowed  spam allowed  \n0                     1             0  \n1                     1             0  \n2                     0             1  \n3                     1             0  \n4                     1             0  ","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>referral link allowed</th>\n      <th>Advertising allowed</th>\n      <th>Promotions allowed</th>\n      <th>legal_advice_allowed</th>\n      <th>spam allowed</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>1</td>\n      <td>0</td>\n      <td>0</td>\n      <td>1</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>1</td>\n      <td>0</td>\n      <td>0</td>\n      <td>1</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>0</td>\n      <td>1</td>\n      <td>1</td>\n      <td>0</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>1</td>\n      <td>0</td>\n      <td>0</td>\n      <td>1</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>1</td>\n      <td>0</td>\n      <td>0</td>\n      <td>1</td>\n      <td>0</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"metadata":{}}],"execution_count":11},{"cell_type":"code","source":"df = df_train.copy()\n\nfor i in split_df.columns:\n    df[i] = split_df[i]\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-07-29T14:07:57.898077Z","iopub.execute_input":"2025-07-29T14:07:57.898393Z","iopub.status.idle":"2025-07-29T14:07:57.906256Z","shell.execute_reply.started":"2025-07-29T14:07:57.898370Z","shell.execute_reply":"2025-07-29T14:07:57.904952Z"}},"outputs":[],"execution_count":12},{"cell_type":"markdown","source":"## Rules are preapred. \n\n## Next we work with examples.","metadata":{}},{"cell_type":"markdown","source":"## So we have examples of data that violate and those who do not voilate the rule. We can take them in seperate datasets, add target values to them. Concatinate them to original dataset and then using all of that, train our model.","metadata":{}},{"cell_type":"markdown","source":"## Let's seperate in the following order\n* ### Original: - df_original \n* ### 1st +ve: - df_p1 \n* ### 2nd +ve: - df_p2 \n* ### 1st -ve: - df_n1 \n* ### 2nd -ve: - df_n2 ","metadata":{}},{"cell_type":"code","source":"df.columns","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-07-29T14:07:59.898487Z","iopub.execute_input":"2025-07-29T14:07:59.898872Z","iopub.status.idle":"2025-07-29T14:07:59.904959Z","shell.execute_reply.started":"2025-07-29T14:07:59.898842Z","shell.execute_reply":"2025-07-29T14:07:59.904055Z"}},"outputs":[{"execution_count":13,"output_type":"execute_result","data":{"text/plain":"Index(['row_id', 'body', 'rule', 'subreddit', 'positive_example_1',\n       'positive_example_2', 'negative_example_1', 'negative_example_2',\n       'rule_violation', 'referral link allowed', 'Advertising allowed',\n       'Promotions allowed', 'legal_advice_allowed', 'spam allowed'],\n      dtype='object')"},"metadata":{}}],"execution_count":13},{"cell_type":"markdown","source":"## Seems all fine.","metadata":{}},{"cell_type":"code","source":"df_original = df[['body', 'rule_violation','referral link allowed', 'Advertising allowed',\n       'Promotions allowed', 'legal_advice_allowed', 'spam allowed']]\n\ndf_p1 = df[['positive_example_1','rule_violation','referral link allowed', 'Advertising allowed',\n       'Promotions allowed', 'legal_advice_allowed', 'spam allowed']]\ndf_p1.loc[:,'rule_violation'] = 0\ndf_p1 = df_p1.rename(columns = {'positive_example_1':'body'})\n\ndf_p2 = df[['positive_example_2','rule_violation','referral link allowed', 'Advertising allowed',\n       'Promotions allowed', 'legal_advice_allowed', 'spam allowed']]\ndf_p2.loc[:,'rule_violation'] = 0\ndf_p2 = df_p2.rename(columns = {'positive_example_2':'body'})\n\ndf_n1 = df[['negative_example_1','rule_violation','referral link allowed', 'Advertising allowed',\n       'Promotions allowed', 'legal_advice_allowed', 'spam allowed']]\ndf_n1.loc[:,'rule_violation'] = 1\ndf_n1 = df_n1.rename(columns = {'negative_example_1':'body'})\n\ndf_n2 = df[['negative_example_2','rule_violation','referral link allowed', 'Advertising allowed',\n       'Promotions allowed', 'legal_advice_allowed', 'spam allowed']]\ndf_n2.loc[:,'rule_violation'] = 1\ndf_n2 = df_n2.rename(columns = {'negative_example_2':'body'})","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-07-29T14:08:00.230379Z","iopub.execute_input":"2025-07-29T14:08:00.231327Z","iopub.status.idle":"2025-07-29T14:08:00.248479Z","shell.execute_reply.started":"2025-07-29T14:08:00.231294Z","shell.execute_reply":"2025-07-29T14:08:00.247493Z"}},"outputs":[],"execution_count":14},{"cell_type":"code","source":"df_total = pd.concat([df_original,df_p1,df_p2,df_n1,df_n2], axis = 0,ignore_index=True)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-07-29T14:08:01.868932Z","iopub.execute_input":"2025-07-29T14:08:01.869884Z","iopub.status.idle":"2025-07-29T14:08:01.876117Z","shell.execute_reply.started":"2025-07-29T14:08:01.869832Z","shell.execute_reply":"2025-07-29T14:08:01.875246Z"}},"outputs":[],"execution_count":15},{"cell_type":"markdown","source":"## Ok, now let's strip comment content and sophisticate it.\n\n### WIll text data have anything to do with numbers. I don't think even if we exclude them, there will be much impact. \n### There are HTML tags as well.\n### So there are links. short advirtisements in brackets. ","metadata":{}},{"cell_type":"code","source":"text1 = df_total['body'].to_list()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-07-29T14:08:02.260757Z","iopub.execute_input":"2025-07-29T14:08:02.261096Z","iopub.status.idle":"2025-07-29T14:08:02.265929Z","shell.execute_reply.started":"2025-07-29T14:08:02.261071Z","shell.execute_reply":"2025-07-29T14:08:02.265030Z"}},"outputs":[],"execution_count":16},{"cell_type":"markdown","source":"### Removing urls","metadata":{}},{"cell_type":"code","source":"def remove_urls(text):\n    pattern = re.compile('https?:\\/\\/\\S+|www\\.\\S+|Https?:\\/\\/\\S+|\\S+\\.com\\S+|\\S+\\.com|\\[.*?\\]|\\S+ \\. com.*')\n    for i in range(len(text)):\n        text[i] = pattern.sub(r'',text[i])\n    return text\n\ntext1 = remove_urls(text1)\n\n##Can be modified","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-07-29T14:08:03.945895Z","iopub.execute_input":"2025-07-29T14:08:03.946209Z","iopub.status.idle":"2025-07-29T14:08:04.193737Z","shell.execute_reply.started":"2025-07-29T14:08:03.946183Z","shell.execute_reply":"2025-07-29T14:08:04.192813Z"}},"outputs":[],"execution_count":17},{"cell_type":"markdown","source":"### Removing HTML tags","metadata":{}},{"cell_type":"code","source":"def remove_html(text):\n    pattern = re.compile('<.*?>')\n    for i in range(len(text)):\n        text[i] = pattern.sub(r'',text[i])\n    return text\n\ntext1 = remove_html(text1)\n\n## Works perfectly","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-07-29T14:08:04.283146Z","iopub.execute_input":"2025-07-29T14:08:04.283481Z","iopub.status.idle":"2025-07-29T14:08:04.293745Z","shell.execute_reply.started":"2025-07-29T14:08:04.283452Z","shell.execute_reply":"2025-07-29T14:08:04.292895Z"}},"outputs":[],"execution_count":18},{"cell_type":"markdown","source":"### Removing Emails and hashtags","metadata":{}},{"cell_type":"code","source":"def remove_mail_hashtag(text):\n    pattern = re.compile('#\\S+|@\\S+|\\S+\\@\\S+|\\S+@')\n    for i in range(len(text)):\n        text[i] = pattern.sub(r'',text[i])\n    return text\n\ntext1 = remove_mail_hashtag(text1)\n\n#Works perfectly","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-07-29T14:08:05.996499Z","iopub.execute_input":"2025-07-29T14:08:05.996807Z","iopub.status.idle":"2025-07-29T14:08:06.148788Z","shell.execute_reply.started":"2025-07-29T14:08:05.996783Z","shell.execute_reply":"2025-07-29T14:08:06.147999Z"}},"outputs":[],"execution_count":19},{"cell_type":"markdown","source":"### Removing username and subreddit mentions","metadata":{}},{"cell_type":"code","source":"def remove_username_subreddit(text):\n    pattern = re.compile('u\\/\\S+|r\\/\\S+')\n    for i in range(len(text)):\n        text[i] = pattern.sub(r'',text[i])\n    return text\n\ntext1 = remove_username_subreddit(text1)\n\n## Works perfectly","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-07-29T14:08:06.324631Z","iopub.execute_input":"2025-07-29T14:08:06.324933Z","iopub.status.idle":"2025-07-29T14:08:06.352293Z","shell.execute_reply.started":"2025-07-29T14:08:06.324913Z","shell.execute_reply":"2025-07-29T14:08:06.351298Z"}},"outputs":[],"execution_count":20},{"cell_type":"markdown","source":"### Removing emojis and more alike.","metadata":{}},{"cell_type":"code","source":"def remove_emojis(text):\n    pattern = re.compile(\"[\"\n                           u\"\\U0001F600-\\U0001F64F\"  # emoticons\n                           u\"\\U0001F300-\\U0001F5FF\"  # symbols & pictographs\n                           u\"\\U0001F680-\\U0001F6FF\"  # transport & map symbols\n                           u\"\\U0001F1E0-\\U0001F1FF\"  # flags (iOS)\n                           u\"\\U00002702-\\U000027B0\"\n                           u\"\\U000024C2-\\U0001F251\"\n                           \"]+\", flags=re.UNICODE)\n    for i in range(len(text)):\n        text[i] = pattern.sub(r'',text[i])\n    return text\n\ntext1 = remove_emojis(text1)\n\n##Works perfectly","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-07-29T14:08:08.088674Z","iopub.execute_input":"2025-07-29T14:08:08.088941Z","iopub.status.idle":"2025-07-29T14:08:08.142389Z","shell.execute_reply.started":"2025-07-29T14:08:08.088922Z","shell.execute_reply":"2025-07-29T14:08:08.141669Z"}},"outputs":[],"execution_count":21},{"cell_type":"markdown","source":"### Removing Numbers & \\n spaces","metadata":{}},{"cell_type":"code","source":"def remove_numbers(text):\n    pattern = re.compile('\\d|\\\\n')\n    for i in range(len(text)):\n        text[i] = pattern.sub(r'',text[i])\n    return text\n\ntext12 = remove_numbers(text1)\n\n## Works perfectly since all currency and special characters will be removed afterwards. ","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-07-29T14:08:08.468834Z","iopub.execute_input":"2025-07-29T14:08:08.469131Z","iopub.status.idle":"2025-07-29T14:08:08.505382Z","shell.execute_reply.started":"2025-07-29T14:08:08.469107Z","shell.execute_reply":"2025-07-29T14:08:08.504496Z"}},"outputs":[],"execution_count":22},{"cell_type":"code","source":"len(text1)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-07-29T14:08:08.668274Z","iopub.execute_input":"2025-07-29T14:08:08.669042Z","iopub.status.idle":"2025-07-29T14:08:08.674274Z","shell.execute_reply.started":"2025-07-29T14:08:08.668990Z","shell.execute_reply":"2025-07-29T14:08:08.673583Z"}},"outputs":[{"execution_count":23,"output_type":"execute_result","data":{"text/plain":"10145"},"metadata":{}}],"execution_count":23},{"cell_type":"code","source":"\n\nnlp = spacy.load(\"en_core_web_sm\")\nspacy_stopwords = nlp.Defaults.stop_words\nnltk_stopwords = set(stopwords.words('english'))\n\ncombined_stopwords = spacy_stopwords.union(nltk_stopwords)\nlemmatizer = WordNetLemmatizer()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-07-29T14:08:09.999037Z","iopub.execute_input":"2025-07-29T14:08:09.999351Z","iopub.status.idle":"2025-07-29T14:08:10.883223Z","shell.execute_reply.started":"2025-07-29T14:08:09.999327Z","shell.execute_reply":"2025-07-29T14:08:10.882392Z"}},"outputs":[],"execution_count":24},{"cell_type":"code","source":"df_total.head()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-07-29T14:08:10.884769Z","iopub.execute_input":"2025-07-29T14:08:10.885116Z","iopub.status.idle":"2025-07-29T14:08:10.895343Z","shell.execute_reply.started":"2025-07-29T14:08:10.885085Z","shell.execute_reply":"2025-07-29T14:08:10.894069Z"}},"outputs":[{"execution_count":25,"output_type":"execute_result","data":{"text/plain":"                                                                                                                                                                                                                                                                                                                             body  \\\n0                                                                                                                                                                                                                                                                     Banks don't want you to know this! Click here to know more!   \n1                                                                                                                                                                                                                                     SD Stream [ ENG Link 1] (http://www.sportsstreams247.com/astra-giurgiu-vs-fc-austria-wien/)   \n2                                                                                                                                                                                                                                                                       Lol. Try appealing the ban and say you won't do it again.   \n3                                                                                                                                                                                                                                                     she will come your home open her legs with  and  you http://sh.ors.it/PALI2   \n4  code free tyrande --->>> [Imgur](http://i.imgur.com/KlvssCl.png)\\n\\nfor you and your friend 2 codes for 4 dollars https://www.paypal.com/cgi-bin/webscr?cmd=_s-xclick&hosted_button_id=UN4E27AG7BWKS\\n\\n2$... buy one directly from here: https://www.paypal.com/cgi-bin/webscr?cmd=_s-xclick&hosted_button_id=VP3S5HQRE7T7E\\n   \n\n   rule_violation  referral link allowed  Advertising allowed  \\\n0               0                      1                    0   \n1               0                      1                    0   \n2               1                      0                    1   \n3               1                      1                    0   \n4               1                      1                    0   \n\n   Promotions allowed  legal_advice_allowed  spam allowed  \n0                   0                     1             0  \n1                   0                     1             0  \n2                   1                     0             1  \n3                   0                     1             0  \n4                   0                     1             0  ","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>body</th>\n      <th>rule_violation</th>\n      <th>referral link allowed</th>\n      <th>Advertising allowed</th>\n      <th>Promotions allowed</th>\n      <th>legal_advice_allowed</th>\n      <th>spam allowed</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>Banks don't want you to know this! Click here to know more!</td>\n      <td>0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>0</td>\n      <td>1</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>SD Stream [ ENG Link 1] (http://www.sportsstreams247.com/astra-giurgiu-vs-fc-austria-wien/)</td>\n      <td>0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>0</td>\n      <td>1</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>Lol. Try appealing the ban and say you won't do it again.</td>\n      <td>1</td>\n      <td>0</td>\n      <td>1</td>\n      <td>1</td>\n      <td>0</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>she will come your home open her legs with  and  you http://sh.ors.it/PALI2</td>\n      <td>1</td>\n      <td>1</td>\n      <td>0</td>\n      <td>0</td>\n      <td>1</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>code free tyrande ---&gt;&gt;&gt; [Imgur](http://i.imgur.com/KlvssCl.png)\\n\\nfor you and your friend 2 codes for 4 dollars https://www.paypal.com/cgi-bin/webscr?cmd=_s-xclick&amp;hosted_button_id=UN4E27AG7BWKS\\n\\n2$... buy one directly from here: https://www.paypal.com/cgi-bin/webscr?cmd=_s-xclick&amp;hosted_button_id=VP3S5HQRE7T7E\\n</td>\n      <td>1</td>\n      <td>1</td>\n      <td>0</td>\n      <td>0</td>\n      <td>1</td>\n      <td>0</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"metadata":{}}],"execution_count":25},{"cell_type":"code","source":"df_total['body'] = text12\nx = df_total.drop(columns = ['rule_violation'])\ny = df_total['rule_violation']\n\nx_train_pre,x_test_pre,y_train,y_test = train_test_split(x,y,train_size = 0.75, random_state = 42)\n\n\ntraining_text = x_train_pre['body'].to_list()\ntesting_text = x_test_pre['body'].to_list()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-07-29T14:08:10.896461Z","iopub.execute_input":"2025-07-29T14:08:10.896808Z","iopub.status.idle":"2025-07-29T14:08:10.920209Z","shell.execute_reply.started":"2025-07-29T14:08:10.896775Z","shell.execute_reply":"2025-07-29T14:08:10.919370Z"}},"outputs":[],"execution_count":26},{"cell_type":"code","source":"x_train_pre = x_train_pre.drop(columns = ['body'])\nx_test_pre = x_test_pre.drop(columns = ['body'])","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-07-29T14:08:10.921615Z","iopub.execute_input":"2025-07-29T14:08:10.921931Z","iopub.status.idle":"2025-07-29T14:08:10.929278Z","shell.execute_reply.started":"2025-07-29T14:08:10.921907Z","shell.execute_reply":"2025-07-29T14:08:10.928456Z"}},"outputs":[],"execution_count":27},{"cell_type":"code","source":"x_train_pre.head()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-07-29T14:08:13.899942Z","iopub.execute_input":"2025-07-29T14:08:13.900548Z","iopub.status.idle":"2025-07-29T14:08:13.909638Z","shell.execute_reply.started":"2025-07-29T14:08:13.900519Z","shell.execute_reply":"2025-07-29T14:08:13.908708Z"}},"outputs":[{"execution_count":28,"output_type":"execute_result","data":{"text/plain":"      referral link allowed  Advertising allowed  Promotions allowed  \\\n7922                      1                    0                   0   \n7711                      1                    0                   0   \n821                       1                    0                   0   \n3080                      0                    1                   1   \n2272                      0                    1                   1   \n\n      legal_advice_allowed  spam allowed  \n7922                     1             0  \n7711                     1             0  \n821                      1             0  \n3080                     0             1  \n2272                     0             1  ","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>referral link allowed</th>\n      <th>Advertising allowed</th>\n      <th>Promotions allowed</th>\n      <th>legal_advice_allowed</th>\n      <th>spam allowed</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>7922</th>\n      <td>1</td>\n      <td>0</td>\n      <td>0</td>\n      <td>1</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>7711</th>\n      <td>1</td>\n      <td>0</td>\n      <td>0</td>\n      <td>1</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>821</th>\n      <td>1</td>\n      <td>0</td>\n      <td>0</td>\n      <td>1</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>3080</th>\n      <td>0</td>\n      <td>1</td>\n      <td>1</td>\n      <td>0</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>2272</th>\n      <td>0</td>\n      <td>1</td>\n      <td>1</td>\n      <td>0</td>\n      <td>1</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"metadata":{}}],"execution_count":28},{"cell_type":"code","source":"cleaned_text = []\npreprocessed_training_text = []\nfor i in range(len(x_train_pre)):\n    text1 = re.sub('[^a-zA-Z]',' ',training_text[i])\n    text1 = text1.lower().split()\n    text1 = [lemmatizer.lemmatize(word) for word in text1 if word not in combined_stopwords]\n    cleaned_text = ' '.join(text1)\n    preprocessed_training_text.append(cleaned_text)\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-07-29T14:08:15.884596Z","iopub.execute_input":"2025-07-29T14:08:15.884921Z","iopub.status.idle":"2025-07-29T14:08:19.458626Z","shell.execute_reply.started":"2025-07-29T14:08:15.884897Z","shell.execute_reply":"2025-07-29T14:08:19.457515Z"}},"outputs":[],"execution_count":29},{"cell_type":"code","source":"cleaned_text1 = []\npreprocessed_testing_text = []\nfor i in range(len(x_test_pre)):\n    text1 = re.sub('[^a-zA-Z]',' ',testing_text[i])\n    text1 = text1.lower().split()\n    text1 = [lemmatizer.lemmatize(word) for word in text1 if word not in combined_stopwords]\n    cleaned_text = ' '.join(text1)\n    preprocessed_testing_text.append(cleaned_text1)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-07-29T14:08:19.460236Z","iopub.execute_input":"2025-07-29T14:08:19.460590Z","iopub.status.idle":"2025-07-29T14:08:19.634126Z","shell.execute_reply.started":"2025-07-29T14:08:19.460557Z","shell.execute_reply":"2025-07-29T14:08:19.633217Z"}},"outputs":[],"execution_count":30},{"cell_type":"code","source":"token = Tokenizer(num_words = 15000, oov_token='<OOV>')\n##training text tokenization and padding\n\ntoken.fit_on_texts(preprocessed_training_text)\nmax_length = max(len(i.split()) for i in preprocessed_training_text)\ntraining_sequence = token.texts_to_sequences(preprocessed_training_text)\nx_train = pad_sequences(training_sequence, maxlen=max_length, padding='pre')\n\n\n##Testing Text tokenization and padding\n\ntesting_sequence = token.texts_to_sequences(preprocessed_testing_text)\nx_test = pad_sequences(testing_sequence, maxlen=max_length, padding='pre')\nmax_length","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-07-29T14:22:26.261326Z","iopub.execute_input":"2025-07-29T14:22:26.261997Z","iopub.status.idle":"2025-07-29T14:22:26.910060Z","shell.execute_reply.started":"2025-07-29T14:22:26.261969Z","shell.execute_reply":"2025-07-29T14:22:26.909160Z"}},"outputs":[{"execution_count":35,"output_type":"execute_result","data":{"text/plain":"60"},"metadata":{}}],"execution_count":35},{"cell_type":"code","source":"text_input = Input(shape=(60,), name='text_input')\nembedding = Embedding(input_dim = 25000, output_dim = 128)(text_input)\nlstm_output = LSTM(128)(embedding)\n\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-07-29T14:24:56.342091Z","iopub.execute_input":"2025-07-29T14:24:56.343027Z","iopub.status.idle":"2025-07-29T14:24:56.398301Z","shell.execute_reply.started":"2025-07-29T14:24:56.342986Z","shell.execute_reply":"2025-07-29T14:24:56.397393Z"}},"outputs":[],"execution_count":36},{"cell_type":"code","source":"from tensorflow.keras.metrics import AUC","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-07-29T14:24:56.733597Z","iopub.execute_input":"2025-07-29T14:24:56.733896Z","iopub.status.idle":"2025-07-29T14:24:56.738378Z","shell.execute_reply.started":"2025-07-29T14:24:56.733874Z","shell.execute_reply":"2025-07-29T14:24:56.737490Z"}},"outputs":[],"execution_count":37},{"cell_type":"code","source":"from tensorflow.keras.layers import MaxPooling1D, Dropout, MaxPooling1D, Dropout","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-07-29T14:24:58.041508Z","iopub.execute_input":"2025-07-29T14:24:58.041818Z","iopub.status.idle":"2025-07-29T14:24:58.045947Z","shell.execute_reply.started":"2025-07-29T14:24:58.041796Z","shell.execute_reply":"2025-07-29T14:24:58.044999Z"}},"outputs":[],"execution_count":38},{"cell_type":"code","source":"feature_input = Input(shape=(5,), name = 'other_feature')\n\ncombined = Concatenate()([lstm_output,feature_input])\n\n\ndense1 = Dense(128, activation='relu')(combined)\ndense2 = Dense(64, activation='relu')(dense1)\ndense3 = Dense(64, activation='relu')(dense2)\noutput = Dense(1, activation='sigmoid')(dense3)\n\nmodel = Model(inputs=[text_input, feature_input], outputs=output)\n\n\nmodel.compile(optimizer='adam', loss='binary_crossentropy', metrics=[AUC(curve='ROC', name='roc_auc')])\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-07-29T14:24:59.130362Z","iopub.execute_input":"2025-07-29T14:24:59.131199Z","iopub.status.idle":"2025-07-29T14:24:59.195085Z","shell.execute_reply.started":"2025-07-29T14:24:59.131167Z","shell.execute_reply":"2025-07-29T14:24:59.194219Z"}},"outputs":[],"execution_count":39},{"cell_type":"markdown","source":"### ROC AUC curve\n","metadata":{}},{"cell_type":"code","source":"history = model.fit(\n    {'text_input': x_train, 'other_feature': x_train_pre},\n    y_train,\n    epochs=5, validation_data=(\n        {'text_input': x_test, 'other_feature': x_test_pre},\n        y_test\n    ),\n    batch_size=32,verbose = 1\n)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-07-29T14:25:00.761688Z","iopub.execute_input":"2025-07-29T14:25:00.761990Z","iopub.status.idle":"2025-07-29T14:26:38.405470Z","shell.execute_reply.started":"2025-07-29T14:25:00.761964Z","shell.execute_reply":"2025-07-29T14:26:38.404618Z"}},"outputs":[{"name":"stdout","text":"Epoch 1/5\n\u001b[1m238/238\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m24s\u001b[0m 80ms/step - loss: 0.6141 - roc_auc: 0.6941 - val_loss: 0.7395 - val_roc_auc: 0.5162\nEpoch 2/5\n\u001b[1m238/238\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m18s\u001b[0m 75ms/step - loss: 0.4183 - roc_auc: 0.8847 - val_loss: 0.7769 - val_roc_auc: 0.5162\nEpoch 3/5\n\u001b[1m238/238\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m19s\u001b[0m 78ms/step - loss: 0.3714 - roc_auc: 0.9051 - val_loss: 0.9244 - val_roc_auc: 0.5162\nEpoch 4/5\n\u001b[1m238/238\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m19s\u001b[0m 79ms/step - loss: 0.3466 - roc_auc: 0.9171 - val_loss: 0.7859 - val_roc_auc: 0.4838\nEpoch 5/5\n\u001b[1m238/238\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m18s\u001b[0m 77ms/step - loss: 0.3465 - roc_auc: 0.9176 - val_loss: 0.7776 - val_roc_auc: 0.5162\n","output_type":"stream"}],"execution_count":40},{"cell_type":"code","source":"print(history.history.keys())","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-07-29T14:26:41.946959Z","iopub.execute_input":"2025-07-29T14:26:41.947263Z","iopub.status.idle":"2025-07-29T14:26:41.952195Z","shell.execute_reply.started":"2025-07-29T14:26:41.947231Z","shell.execute_reply":"2025-07-29T14:26:41.951277Z"}},"outputs":[{"name":"stdout","text":"dict_keys(['loss', 'roc_auc', 'val_loss', 'val_roc_auc'])\n","output_type":"stream"}],"execution_count":41},{"cell_type":"code","source":"y_pred = model.predict({'text_input': x_test, 'other_feature': x_test_pre})\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-07-29T14:26:42.145158Z","iopub.execute_input":"2025-07-29T14:26:42.145506Z","iopub.status.idle":"2025-07-29T14:26:44.540592Z","shell.execute_reply.started":"2025-07-29T14:26:42.145481Z","shell.execute_reply":"2025-07-29T14:26:44.539793Z"}},"outputs":[{"name":"stdout","text":"\u001b[1m80/80\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 25ms/step\n","output_type":"stream"}],"execution_count":42},{"cell_type":"code","source":"from sklearn.metrics import roc_auc_score\nroc_auc_test = roc_auc_score(y_test, y_pred)\nprint(f\"Test ROC-AUC: {roc_auc_test:.4f}\")","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-07-29T14:26:45.107038Z","iopub.execute_input":"2025-07-29T14:26:45.107356Z","iopub.status.idle":"2025-07-29T14:26:45.118867Z","shell.execute_reply.started":"2025-07-29T14:26:45.107332Z","shell.execute_reply":"2025-07-29T14:26:45.117932Z"}},"outputs":[{"name":"stdout","text":"Test ROC-AUC: 0.5162\n","output_type":"stream"}],"execution_count":43},{"cell_type":"code","source":"","metadata":{"trusted":true},"outputs":[],"execution_count":null}]}
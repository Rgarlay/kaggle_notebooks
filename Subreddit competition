{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.11.13","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"nvidiaTeslaT4","dataSources":[{"sourceId":94635,"databundleVersionId":13121456,"sourceType":"competition"}],"dockerImageVersionId":31089,"isInternetEnabled":true,"language":"python","sourceType":"notebook","isGpuEnabled":true}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"code","source":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle/python Docker image: https://github.com/kaggle/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)\npd.set_option('display.max_columns', None)\npd.set_option('display.max_colwidth',None)\nimport re\n## Now tokenization\nfrom tensorflow.keras.preprocessing.text import Tokenizer\nfrom keras.utils import pad_sequences\nimport nltk\nnltk.download('stopwords')\nfrom nltk.corpus import stopwords\nfrom nltk.stem import WordNetLemmatizer\nimport spacy\nfrom sklearn.model_selection import train_test_split\nfrom tensorflow.keras.layers import Dense, Embedding, Concatenate, Input, LSTM\nfrom tensorflow.keras.models import Model\nfrom tensorflow.keras.metrics import AUC\nfrom tensorflow.keras.layers import MaxPooling1D, Dropout, MaxPooling1D, Dropout\n\n# Input data files are available in the read-only \"../input/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('/kaggle/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (/kaggle/working/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to /kaggle/temp/, but they won't be saved outside of the current session","metadata":{"_uuid":"8f2839f25d086af736a60e9eeb907d3b93b6e0e5","_cell_guid":"b1076dfc-b9ad-4769-8c92-a6c4dae69d19","trusted":true,"execution":{"iopub.status.busy":"2025-07-30T17:23:40.518772Z","iopub.execute_input":"2025-07-30T17:23:40.519000Z","iopub.status.idle":"2025-07-30T17:23:40.533479Z","shell.execute_reply.started":"2025-07-30T17:23:40.518984Z","shell.execute_reply":"2025-07-30T17:23:40.532608Z"}},"outputs":[{"name":"stdout","text":"/kaggle/input/jigsaw-agile-community-rules/sample_submission.csv\n/kaggle/input/jigsaw-agile-community-rules/train.csv\n/kaggle/input/jigsaw-agile-community-rules/test.csv\n","output_type":"stream"},{"name":"stderr","text":"[nltk_data] Downloading package stopwords to /usr/share/nltk_data...\n[nltk_data]   Package stopwords is already up-to-date!\n","output_type":"stream"}],"execution_count":42},{"cell_type":"code","source":"df_train = pd.read_csv('/kaggle/input/jigsaw-agile-community-rules/train.csv')","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-07-30T17:23:41.235306Z","iopub.execute_input":"2025-07-30T17:23:41.235605Z","iopub.status.idle":"2025-07-30T17:23:41.268941Z","shell.execute_reply.started":"2025-07-30T17:23:41.235585Z","shell.execute_reply":"2025-07-30T17:23:41.268404Z"}},"outputs":[],"execution_count":43},{"cell_type":"markdown","source":"## We need to match row_id with Probability of being in one class.","metadata":{}},{"cell_type":"code","source":"def dataset_basics(df):\n    print(f'Number of empty rows \\n {df.isna().sum()} \\n')\n    print(f'Number of duplicate rows {df.duplicated().sum()} \\n')\n    print(f'\\n Dtypes and other info \\n {df.info()} \\n')\n    print(f'Shape of the dataframe {df.shape}')\n\ndataset_basics(df_train)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-07-30T17:23:41.599379Z","iopub.execute_input":"2025-07-30T17:23:41.599652Z","iopub.status.idle":"2025-07-30T17:23:41.617117Z","shell.execute_reply.started":"2025-07-30T17:23:41.599632Z","shell.execute_reply":"2025-07-30T17:23:41.616569Z"}},"outputs":[{"name":"stdout","text":"Number of empty rows \n row_id                0\nbody                  0\nrule                  0\nsubreddit             0\npositive_example_1    0\npositive_example_2    0\nnegative_example_1    0\nnegative_example_2    0\nrule_violation        0\ndtype: int64 \n\nNumber of duplicate rows 0 \n\n<class 'pandas.core.frame.DataFrame'>\nRangeIndex: 2029 entries, 0 to 2028\nData columns (total 9 columns):\n #   Column              Non-Null Count  Dtype \n---  ------              --------------  ----- \n 0   row_id              2029 non-null   int64 \n 1   body                2029 non-null   object\n 2   rule                2029 non-null   object\n 3   subreddit           2029 non-null   object\n 4   positive_example_1  2029 non-null   object\n 5   positive_example_2  2029 non-null   object\n 6   negative_example_1  2029 non-null   object\n 7   negative_example_2  2029 non-null   object\n 8   rule_violation      2029 non-null   int64 \ndtypes: int64(2), object(7)\nmemory usage: 142.8+ KB\n\n Dtypes and other info \n None \n\nShape of the dataframe (2029, 9)\n","output_type":"stream"}],"execution_count":44},{"cell_type":"code","source":"df_train['subreddit'].nunique()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-07-30T17:23:41.723145Z","iopub.execute_input":"2025-07-30T17:23:41.723742Z","iopub.status.idle":"2025-07-30T17:23:41.728680Z","shell.execute_reply.started":"2025-07-30T17:23:41.723710Z","shell.execute_reply":"2025-07-30T17:23:41.728096Z"}},"outputs":[{"execution_count":45,"output_type":"execute_result","data":{"text/plain":"100"},"metadata":{}}],"execution_count":45},{"cell_type":"markdown","source":"## There are 100 unique subreddits.","metadata":{}},{"cell_type":"code","source":"df_train['rule_violation'].value_counts()/df_train.shape[0] * 100","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-07-30T17:23:41.995198Z","iopub.execute_input":"2025-07-30T17:23:41.995478Z","iopub.status.idle":"2025-07-30T17:23:42.001734Z","shell.execute_reply.started":"2025-07-30T17:23:41.995455Z","shell.execute_reply":"2025-07-30T17:23:42.000967Z"}},"outputs":[{"execution_count":46,"output_type":"execute_result","data":{"text/plain":"rule_violation\n1    50.813208\n0    49.186792\nName: count, dtype: float64"},"metadata":{}}],"execution_count":46},{"cell_type":"markdown","source":"## Rule violated vs obeyed ratio is almost 1 to 1.\n\n## Let's prepare the Rules first.","metadata":{}},{"cell_type":"code","source":"split_df = df_train['rule'].str.split(',', expand=True)\nsplit_df.fillna('0',inplace=True)\nsplit_df.columns = ['rule 1','rule 2','rule 3','rule 4']\nsplit_df.head()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-07-30T17:23:43.063924Z","iopub.execute_input":"2025-07-30T17:23:43.064526Z","iopub.status.idle":"2025-07-30T17:23:43.077757Z","shell.execute_reply.started":"2025-07-30T17:23:43.064501Z","shell.execute_reply":"2025-07-30T17:23:43.077153Z"}},"outputs":[{"execution_count":47,"output_type":"execute_result","data":{"text/plain":"                                                   rule 1           rule 2  \\\n0                                    No Advertising: Spam   referral links   \n1                                    No Advertising: Spam   referral links   \n2  No legal advice: Do not offer or request legal advice.                0   \n3                                    No Advertising: Spam   referral links   \n4                                    No Advertising: Spam   referral links   \n\n                     rule 3                                     rule 4  \n0   unsolicited advertising   and promotional content are not allowed.  \n1   unsolicited advertising   and promotional content are not allowed.  \n2                         0                                          0  \n3   unsolicited advertising   and promotional content are not allowed.  \n4   unsolicited advertising   and promotional content are not allowed.  ","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>rule 1</th>\n      <th>rule 2</th>\n      <th>rule 3</th>\n      <th>rule 4</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>No Advertising: Spam</td>\n      <td>referral links</td>\n      <td>unsolicited advertising</td>\n      <td>and promotional content are not allowed.</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>No Advertising: Spam</td>\n      <td>referral links</td>\n      <td>unsolicited advertising</td>\n      <td>and promotional content are not allowed.</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>No legal advice: Do not offer or request legal advice.</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>No Advertising: Spam</td>\n      <td>referral links</td>\n      <td>unsolicited advertising</td>\n      <td>and promotional content are not allowed.</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>No Advertising: Spam</td>\n      <td>referral links</td>\n      <td>unsolicited advertising</td>\n      <td>and promotional content are not allowed.</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"metadata":{}}],"execution_count":47},{"cell_type":"code","source":"## Allowed is 1 and forbidden is 0 (Referral links)\nsplit_df['rule 2'] = split_df['rule 2'].apply(lambda x : 1 if 'referral links' in str(x).lower() else 0)\nsplit_df = split_df.rename(columns = {'rule 2':'referral link allowed'})\n\n\n## Allowed is 1 and not allowed is 0. (Legal Advices)\nsplit_df['legal_advice_allowed'] = split_df['rule 1'].apply(lambda x: 0 if 'legal' in str(x).lower() else 1)\n\n\n## Allowed is 1 and not allowed is 0. (promotions) \nsplit_df['rule 4'] = split_df['rule 4'].apply(lambda x: 0 if 'promotional' in str(x).lower() else 1)\nsplit_df = split_df.rename(columns = {'rule 4':'Promotions allowed'})\n\n\n## Allowed is 1 and not allowed is 0. (Advertising) \nsplit_df['rule 3'] = split_df['rule 3'].apply(lambda x: 0 if 'advertising' in str(x).lower() else 1)\nsplit_df = split_df.rename(columns = {'rule 3':'Advertising allowed'})\n\n\n## Allowed is 1 and not allowed is 0. (Spam) \n## Spam 1 doesn't mean that it's allowed. It means that it's not relevant. \nsplit_df_1 = split_df['rule 1'].str.split(':',expand=True)\nsplit_df = split_df.drop(columns = ['rule 1'])\n\nsplit_df_1.columns = ['Advert','spam']\nsplit_df_1 = split_df_1.drop(columns = ['Advert'])\n\nsplit_df_1['spam allowed'] = split_df_1['spam'].apply(lambda x: 0 if 'spam' in str(x).lower() else 1)\nsplit_df['spam allowed'] = split_df_1['spam allowed']","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-07-30T17:23:43.199380Z","iopub.execute_input":"2025-07-30T17:23:43.199608Z","iopub.status.idle":"2025-07-30T17:23:43.220156Z","shell.execute_reply.started":"2025-07-30T17:23:43.199591Z","shell.execute_reply":"2025-07-30T17:23:43.219636Z"}},"outputs":[],"execution_count":48},{"cell_type":"markdown","source":"### Both Legal advice and Spam are mututally exclusive. In model, remember to specify it.","metadata":{}},{"cell_type":"code","source":"df = df_train.copy()\n\nfor i in split_df.columns:\n    df[i] = split_df[i]\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-07-30T17:23:44.159186Z","iopub.execute_input":"2025-07-30T17:23:44.159752Z","iopub.status.idle":"2025-07-30T17:23:44.166228Z","shell.execute_reply.started":"2025-07-30T17:23:44.159730Z","shell.execute_reply":"2025-07-30T17:23:44.165418Z"}},"outputs":[],"execution_count":49},{"cell_type":"markdown","source":"## Rules are preapred. \n\n## Next we work with examples.\n\n## So we have examples of data that violate and those who do not voilate the rule. We can take them in seperate datasets, add target values to them. Concatinate them to original dataset and then using all of that, train our model.\n\n## Let's seperate in the following order\n* ### Original: - df_original \n* ### 1st +ve: - df_p1 \n* ### 2nd +ve: - df_p2 \n* ### 1st -ve: - df_n1 \n* ### 2nd -ve: - df_n2\n\n## Seems all fine.","metadata":{}},{"cell_type":"code","source":"df_original = df[['body', 'rule_violation','referral link allowed', 'Advertising allowed',\n       'Promotions allowed', 'legal_advice_allowed', 'spam allowed']]\n\ndf_p1 = df[['positive_example_1','rule_violation','referral link allowed', 'Advertising allowed',\n       'Promotions allowed', 'legal_advice_allowed', 'spam allowed']]\ndf_p1.loc[:,'rule_violation'] = 0\ndf_p1 = df_p1.rename(columns = {'positive_example_1':'body'})\n\ndf_p2 = df[['positive_example_2','rule_violation','referral link allowed', 'Advertising allowed',\n       'Promotions allowed', 'legal_advice_allowed', 'spam allowed']]\ndf_p2.loc[:,'rule_violation'] = 0\ndf_p2 = df_p2.rename(columns = {'positive_example_2':'body'})\n\ndf_n1 = df[['negative_example_1','rule_violation','referral link allowed', 'Advertising allowed',\n       'Promotions allowed', 'legal_advice_allowed', 'spam allowed']]\ndf_n1.loc[:,'rule_violation'] = 1\ndf_n1 = df_n1.rename(columns = {'negative_example_1':'body'})\n\ndf_n2 = df[['negative_example_2','rule_violation','referral link allowed', 'Advertising allowed',\n       'Promotions allowed', 'legal_advice_allowed', 'spam allowed']]\ndf_n2.loc[:,'rule_violation'] = 1\ndf_n2 = df_n2.rename(columns = {'negative_example_2':'body'})","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-07-30T17:23:44.459620Z","iopub.execute_input":"2025-07-30T17:23:44.459893Z","iopub.status.idle":"2025-07-30T17:23:44.473004Z","shell.execute_reply.started":"2025-07-30T17:23:44.459875Z","shell.execute_reply":"2025-07-30T17:23:44.472415Z"}},"outputs":[],"execution_count":50},{"cell_type":"code","source":"df_total = pd.concat([df_original,df_p1,df_p2,df_n1,df_n2], axis = 0,ignore_index=True)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-07-30T17:23:44.547619Z","iopub.execute_input":"2025-07-30T17:23:44.547862Z","iopub.status.idle":"2025-07-30T17:23:44.553655Z","shell.execute_reply.started":"2025-07-30T17:23:44.547844Z","shell.execute_reply":"2025-07-30T17:23:44.552837Z"}},"outputs":[],"execution_count":51},{"cell_type":"markdown","source":"## Ok, now let's strip comment content and sophisticate it.\n\n### WIll text data have anything to do with numbers. I don't think even if we exclude them, there will be much impact. \n### There are HTML tags as well.\n### So there are links. short advirtisements in brackets. ","metadata":{}},{"cell_type":"code","source":"text1 = df_total['body'].to_list()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-07-30T17:23:45.655655Z","iopub.execute_input":"2025-07-30T17:23:45.655948Z","iopub.status.idle":"2025-07-30T17:23:45.660200Z","shell.execute_reply.started":"2025-07-30T17:23:45.655927Z","shell.execute_reply":"2025-07-30T17:23:45.659293Z"}},"outputs":[],"execution_count":52},{"cell_type":"markdown","source":"### Removing urls","metadata":{}},{"cell_type":"code","source":"def remove_urls(text):\n    pattern = re.compile('https?:\\/\\/\\S+|www\\.\\S+|Https?:\\/\\/\\S+|\\S+\\.com\\S+|\\S+\\.com|\\[.*?\\]|\\S+ \\. com.*')\n    for i in range(len(text)):\n        text[i] = pattern.sub(r'',text[i])\n    return text\n\ntext1 = remove_urls(text1)\n\n##Can be modified\n\n### Removing HTML tags\ndef remove_html(text):\n    pattern = re.compile('<.*?>')\n    for i in range(len(text)):\n        text[i] = pattern.sub(r'',text[i])\n    return text\n\ntext1 = remove_html(text1)\n\n## Works perfectly\n\n\n### Removing Emails and hashtags\n\ndef remove_mail_hashtag(text):\n    pattern = re.compile('#\\S+|@\\S+|\\S+\\@\\S+|\\S+@')\n    for i in range(len(text)):\n        text[i] = pattern.sub(r'',text[i])\n    return text\n\ntext1 = remove_mail_hashtag(text1)\n\n#Works perfectly\n\n### Removing username and subreddit mentions\n\ndef remove_username_subreddit(text):\n    pattern = re.compile('u\\/\\S+|r\\/\\S+')\n    for i in range(len(text)):\n        text[i] = pattern.sub(r'',text[i])\n    return text\n\ntext1 = remove_username_subreddit(text1)\n\n## Works perfectly\n\n### Removing emojis and more alike.\n\ndef remove_emojis(text):\n    pattern = re.compile(\"[\"\n                           u\"\\U0001F600-\\U0001F64F\"  # emoticons\n                           u\"\\U0001F300-\\U0001F5FF\"  # symbols & pictographs\n                           u\"\\U0001F680-\\U0001F6FF\"  # transport & map symbols\n                           u\"\\U0001F1E0-\\U0001F1FF\"  # flags (iOS)\n                           u\"\\U00002702-\\U000027B0\"\n                           u\"\\U000024C2-\\U0001F251\"\n                           \"]+\", flags=re.UNICODE)\n    for i in range(len(text)):\n        text[i] = pattern.sub(r'',text[i])\n    return text\n\ntext1 = remove_emojis(text1)\n\n##Works perfectly\n\n### Removing Numbers & \\n spaces\n\ndef remove_numbers(text):\n    pattern = re.compile('\\d|\\\\n')\n    for i in range(len(text)):\n        text[i] = pattern.sub(r'',text[i])\n    return text\n\ntext12 = remove_numbers(text1)\n\n## Works perfectly since all currency and special characters will be removed afterwards. ","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-07-30T17:23:45.959843Z","iopub.execute_input":"2025-07-30T17:23:45.960111Z","iopub.status.idle":"2025-07-30T17:23:46.366065Z","shell.execute_reply.started":"2025-07-30T17:23:45.960090Z","shell.execute_reply":"2025-07-30T17:23:46.365503Z"}},"outputs":[],"execution_count":53},{"cell_type":"code","source":"len(text12)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-07-30T17:23:51.455578Z","iopub.execute_input":"2025-07-30T17:23:51.455844Z","iopub.status.idle":"2025-07-30T17:23:51.461900Z","shell.execute_reply.started":"2025-07-30T17:23:51.455823Z","shell.execute_reply":"2025-07-30T17:23:51.461134Z"}},"outputs":[{"execution_count":54,"output_type":"execute_result","data":{"text/plain":"10145"},"metadata":{}}],"execution_count":54},{"cell_type":"code","source":"nlp = spacy.load(\"en_core_web_sm\")\nspacy_stopwords = nlp.Defaults.stop_words\nnltk_stopwords = set(stopwords.words('english'))\n\ncombined_stopwords = spacy_stopwords.union(nltk_stopwords)\nlemmatizer = WordNetLemmatizer()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-07-30T17:23:51.635430Z","iopub.execute_input":"2025-07-30T17:23:51.635705Z","iopub.status.idle":"2025-07-30T17:23:52.197611Z","shell.execute_reply.started":"2025-07-30T17:23:51.635685Z","shell.execute_reply":"2025-07-30T17:23:52.196843Z"}},"outputs":[],"execution_count":55},{"cell_type":"code","source":"df_total.head()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-07-30T17:23:52.198899Z","iopub.execute_input":"2025-07-30T17:23:52.199181Z","iopub.status.idle":"2025-07-30T17:23:52.207476Z","shell.execute_reply.started":"2025-07-30T17:23:52.199157Z","shell.execute_reply":"2025-07-30T17:23:52.206614Z"}},"outputs":[{"execution_count":56,"output_type":"execute_result","data":{"text/plain":"                                                                                                                                                                                                                                                                                                                             body  \\\n0                                                                                                                                                                                                                                                                     Banks don't want you to know this! Click here to know more!   \n1                                                                                                                                                                                                                                     SD Stream [ ENG Link 1] (http://www.sportsstreams247.com/astra-giurgiu-vs-fc-austria-wien/)   \n2                                                                                                                                                                                                                                                                       Lol. Try appealing the ban and say you won't do it again.   \n3                                                                                                                                                                                                                                                     she will come your home open her legs with  and  you http://sh.ors.it/PALI2   \n4  code free tyrande --->>> [Imgur](http://i.imgur.com/KlvssCl.png)\\n\\nfor you and your friend 2 codes for 4 dollars https://www.paypal.com/cgi-bin/webscr?cmd=_s-xclick&hosted_button_id=UN4E27AG7BWKS\\n\\n2$... buy one directly from here: https://www.paypal.com/cgi-bin/webscr?cmd=_s-xclick&hosted_button_id=VP3S5HQRE7T7E\\n   \n\n   rule_violation  referral link allowed  Advertising allowed  \\\n0               0                      1                    0   \n1               0                      1                    0   \n2               1                      0                    1   \n3               1                      1                    0   \n4               1                      1                    0   \n\n   Promotions allowed  legal_advice_allowed  spam allowed  \n0                   0                     1             0  \n1                   0                     1             0  \n2                   1                     0             1  \n3                   0                     1             0  \n4                   0                     1             0  ","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>body</th>\n      <th>rule_violation</th>\n      <th>referral link allowed</th>\n      <th>Advertising allowed</th>\n      <th>Promotions allowed</th>\n      <th>legal_advice_allowed</th>\n      <th>spam allowed</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>Banks don't want you to know this! Click here to know more!</td>\n      <td>0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>0</td>\n      <td>1</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>SD Stream [ ENG Link 1] (http://www.sportsstreams247.com/astra-giurgiu-vs-fc-austria-wien/)</td>\n      <td>0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>0</td>\n      <td>1</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>Lol. Try appealing the ban and say you won't do it again.</td>\n      <td>1</td>\n      <td>0</td>\n      <td>1</td>\n      <td>1</td>\n      <td>0</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>she will come your home open her legs with  and  you http://sh.ors.it/PALI2</td>\n      <td>1</td>\n      <td>1</td>\n      <td>0</td>\n      <td>0</td>\n      <td>1</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>code free tyrande ---&gt;&gt;&gt; [Imgur](http://i.imgur.com/KlvssCl.png)\\n\\nfor you and your friend 2 codes for 4 dollars https://www.paypal.com/cgi-bin/webscr?cmd=_s-xclick&amp;hosted_button_id=UN4E27AG7BWKS\\n\\n2$... buy one directly from here: https://www.paypal.com/cgi-bin/webscr?cmd=_s-xclick&amp;hosted_button_id=VP3S5HQRE7T7E\\n</td>\n      <td>1</td>\n      <td>1</td>\n      <td>0</td>\n      <td>0</td>\n      <td>1</td>\n      <td>0</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"metadata":{}}],"execution_count":56},{"cell_type":"code","source":"df_total['body'] = text12\nx = df_total.drop(columns = ['rule_violation'])\ny = df_total['rule_violation']\n\nx_train_pre,x_test_pre,y_train,y_test = train_test_split(x,y,train_size = 0.75, random_state = 42)\n\n\ntraining_text = x_train_pre['body'].to_list()\ntesting_text = x_test_pre['body'].to_list()\n\n\nx_train_pre = x_train_pre.drop(columns = ['body'])\nx_test_pre = x_test_pre.drop(columns = ['body'])","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-07-30T17:23:55.099529Z","iopub.execute_input":"2025-07-30T17:23:55.099794Z","iopub.status.idle":"2025-07-30T17:23:55.112148Z","shell.execute_reply.started":"2025-07-30T17:23:55.099773Z","shell.execute_reply":"2025-07-30T17:23:55.111307Z"}},"outputs":[],"execution_count":57},{"cell_type":"code","source":"x_train_pre.head()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-07-30T17:23:55.267066Z","iopub.execute_input":"2025-07-30T17:23:55.267308Z","iopub.status.idle":"2025-07-30T17:23:55.275218Z","shell.execute_reply.started":"2025-07-30T17:23:55.267287Z","shell.execute_reply":"2025-07-30T17:23:55.274239Z"}},"outputs":[{"execution_count":58,"output_type":"execute_result","data":{"text/plain":"      referral link allowed  Advertising allowed  Promotions allowed  \\\n7922                      1                    0                   0   \n7711                      1                    0                   0   \n821                       1                    0                   0   \n3080                      0                    1                   1   \n2272                      0                    1                   1   \n\n      legal_advice_allowed  spam allowed  \n7922                     1             0  \n7711                     1             0  \n821                      1             0  \n3080                     0             1  \n2272                     0             1  ","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>referral link allowed</th>\n      <th>Advertising allowed</th>\n      <th>Promotions allowed</th>\n      <th>legal_advice_allowed</th>\n      <th>spam allowed</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>7922</th>\n      <td>1</td>\n      <td>0</td>\n      <td>0</td>\n      <td>1</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>7711</th>\n      <td>1</td>\n      <td>0</td>\n      <td>0</td>\n      <td>1</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>821</th>\n      <td>1</td>\n      <td>0</td>\n      <td>0</td>\n      <td>1</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>3080</th>\n      <td>0</td>\n      <td>1</td>\n      <td>1</td>\n      <td>0</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>2272</th>\n      <td>0</td>\n      <td>1</td>\n      <td>1</td>\n      <td>0</td>\n      <td>1</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"metadata":{}}],"execution_count":58},{"cell_type":"code","source":"##Training data cleaning\n\ncleaned_text = []\npreprocessed_training_text = []\nfor i in range(len(x_train_pre)):\n    text1 = re.sub('[^a-zA-Z]',' ',training_text[i])\n    text1 = text1.lower()\n    text1 = [lemmatizer.lemmatize(word) for word in text1 if word not in combined_stopwords]\n    cleaned_text = ' '.join(text1)\n    preprocessed_training_text.append(cleaned_text)\n\n##Testing data cleaning\n\ncleaned_text1 = []\npreprocessed_testing_text = []\nfor i in range(len(x_test_pre)):\n    text1 = re.sub('[^a-zA-Z]',' ',testing_text[i])\n    text1 = text1.lower()\n    text1 = [lemmatizer.lemmatize(word) for word in text1 if word not in combined_stopwords]\n    cleaned_text = ' '.join(text1)\n    preprocessed_testing_text.append(cleaned_text1)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-07-30T17:23:55.459236Z","iopub.execute_input":"2025-07-30T17:23:55.459483Z","iopub.status.idle":"2025-07-30T17:23:58.135326Z","shell.execute_reply.started":"2025-07-30T17:23:55.459465Z","shell.execute_reply":"2025-07-30T17:23:58.134552Z"}},"outputs":[],"execution_count":59},{"cell_type":"code","source":"token = Tokenizer(num_words = 10000, oov_token='<OOV>')\n##training text tokenization and padding\n\ntoken.fit_on_texts(preprocessed_training_text)\nmax_length = max(len(i.split()) for i in preprocessed_training_text)\ntraining_sequence = token.texts_to_sequences(preprocessed_training_text)\nx_train = pad_sequences(training_sequence, maxlen=max_length, padding='pre')\n\n\n##Testing Text tokenization and padding\n\ntesting_sequence = token.texts_to_sequences(preprocessed_testing_text)\nx_test = pad_sequences(testing_sequence, maxlen=max_length, padding='pre')\nmax_length","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-07-30T17:29:58.525826Z","iopub.execute_input":"2025-07-30T17:29:58.526984Z","iopub.status.idle":"2025-07-30T17:29:58.846615Z","shell.execute_reply.started":"2025-07-30T17:29:58.526952Z","shell.execute_reply":"2025-07-30T17:29:58.846064Z"}},"outputs":[{"execution_count":87,"output_type":"execute_result","data":{"text/plain":"213"},"metadata":{}}],"execution_count":87},{"cell_type":"code","source":"","metadata":{"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"# embedding = Embedding(input_dim = 5000, output_dim = 128)(text_input)\n# lstm_output = LSTM(128)(embedding)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-07-30T17:29:59.945461Z","iopub.execute_input":"2025-07-30T17:29:59.945687Z","iopub.status.idle":"2025-07-30T17:29:59.948981Z","shell.execute_reply.started":"2025-07-30T17:29:59.945671Z","shell.execute_reply":"2025-07-30T17:29:59.948244Z"}},"outputs":[],"execution_count":88},{"cell_type":"code","source":"from tensorflow.keras.layers import SimpleRNN, Dense,Reshape\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-07-30T17:30:00.169182Z","iopub.execute_input":"2025-07-30T17:30:00.169402Z","iopub.status.idle":"2025-07-30T17:30:00.173020Z","shell.execute_reply.started":"2025-07-30T17:30:00.169348Z","shell.execute_reply":"2025-07-30T17:30:00.172273Z"}},"outputs":[],"execution_count":89},{"cell_type":"code","source":"from tensorflow.keras.optimizers import Adam\n\nadam = Adam(learning_rate = 0.1)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-07-30T17:30:03.229770Z","iopub.execute_input":"2025-07-30T17:30:03.230218Z","iopub.status.idle":"2025-07-30T17:30:03.236330Z","shell.execute_reply.started":"2025-07-30T17:30:03.230195Z","shell.execute_reply":"2025-07-30T17:30:03.235806Z"}},"outputs":[],"execution_count":90},{"cell_type":"code","source":"","metadata":{"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"text_input = Input(shape=(213,), name='text_input')\n\n\nfeature_input = Input(shape=(5,), name = 'other_feature')\ncombined = Concatenate()([text_input,feature_input])\n\nreshaped = Reshape((218, 1))(combined)\nlstm1 = LSTM(256, activation = 'relu', return_sequences=True)(reshaped)\nlstm2 = LSTM(128, activation = 'relu', return_sequences=True)(lstm1)\nrnn1 = SimpleRNN(128, activation='relu', return_sequences=True)(lstm2)\n\nrnn2 = SimpleRNN(64, activation='relu')(rnn1)\ndrop3 = Dropout(0.2)(rnn2)  # 20% neurons dropped\ndense3 = Dense(32, activation='relu')(drop3)\noutput = Dense(1, activation='sigmoid')(drop3)\n\nmodel = Model(inputs=[text_input, feature_input], outputs=output)\n\n\nmodel.compile(optimizer=adam, loss='sparse_categorical_crossentropy', metrics=[AUC(curve='ROC', name='roc_auc')])\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-07-30T17:28:58.640805Z","iopub.execute_input":"2025-07-30T17:28:58.640995Z","iopub.status.idle":"2025-07-30T17:28:58.746247Z","shell.execute_reply.started":"2025-07-30T17:28:58.640980Z","shell.execute_reply":"2025-07-30T17:28:58.745543Z"}},"outputs":[],"execution_count":84},{"cell_type":"markdown","source":"### ROC AUC curve\n","metadata":{}},{"cell_type":"code","source":"print(combined)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-07-30T17:28:59.972952Z","iopub.execute_input":"2025-07-30T17:28:59.973647Z","iopub.status.idle":"2025-07-30T17:28:59.977973Z","shell.execute_reply.started":"2025-07-30T17:28:59.973613Z","shell.execute_reply":"2025-07-30T17:28:59.977308Z"}},"outputs":[{"name":"stdout","text":"<KerasTensor shape=(None, 640), dtype=float32, sparse=False, name=keras_tensor_88>\n","output_type":"stream"}],"execution_count":85},{"cell_type":"code","source":"\nhistory = model.fit(\n    {'text_input': x_train, 'other_feature': x_train_pre},\n    y_train,\n    epochs=5, validation_data=(\n        {'text_input': x_test, 'other_feature': x_test_pre},\n        y_test\n    ),\n    batch_size=64,verbose = 1\n)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-07-30T17:29:00.184642Z","iopub.execute_input":"2025-07-30T17:29:00.184856Z","iopub.status.idle":"2025-07-30T17:29:47.795242Z","shell.execute_reply.started":"2025-07-30T17:29:00.184838Z","shell.execute_reply":"2025-07-30T17:29:47.794391Z"}},"outputs":[{"name":"stdout","text":"Epoch 1/5\n\u001b[1m119/119\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m46s\u001b[0m 310ms/step - loss: nan - roc_auc: 0.5049 - val_loss: nan - val_roc_auc: 0.5000\nEpoch 2/5\n\u001b[1m  7/119\u001b[0m \u001b[32m━\u001b[0m\u001b[37m━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[1m27s\u001b[0m 248ms/step - loss: nan - roc_auc: 0.5000","output_type":"stream"},{"traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mKeyboardInterrupt\u001b[0m                         Traceback (most recent call last)","\u001b[0;32m/tmp/ipykernel_36/933805116.py\u001b[0m in \u001b[0;36m<cell line: 0>\u001b[0;34m()\u001b[0m\n\u001b[0;32m----> 1\u001b[0;31m history = model.fit(\n\u001b[0m\u001b[1;32m      2\u001b[0m     \u001b[0;34m{\u001b[0m\u001b[0;34m'text_input'\u001b[0m\u001b[0;34m:\u001b[0m \u001b[0mx_train\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m'other_feature'\u001b[0m\u001b[0;34m:\u001b[0m \u001b[0mx_train_pre\u001b[0m\u001b[0;34m}\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      3\u001b[0m     \u001b[0my_train\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      4\u001b[0m     epochs=5, validation_data=(\n\u001b[1;32m      5\u001b[0m         \u001b[0;34m{\u001b[0m\u001b[0;34m'text_input'\u001b[0m\u001b[0;34m:\u001b[0m \u001b[0mx_test\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m'other_feature'\u001b[0m\u001b[0;34m:\u001b[0m \u001b[0mx_test_pre\u001b[0m\u001b[0;34m}\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.11/dist-packages/keras/src/utils/traceback_utils.py\u001b[0m in \u001b[0;36merror_handler\u001b[0;34m(*args, **kwargs)\u001b[0m\n\u001b[1;32m    115\u001b[0m         \u001b[0mfiltered_tb\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    116\u001b[0m         \u001b[0;32mtry\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 117\u001b[0;31m             \u001b[0;32mreturn\u001b[0m \u001b[0mfn\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m*\u001b[0m\u001b[0margs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    118\u001b[0m         \u001b[0;32mexcept\u001b[0m \u001b[0mException\u001b[0m \u001b[0;32mas\u001b[0m \u001b[0me\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    119\u001b[0m             \u001b[0mfiltered_tb\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0m_process_traceback_frames\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0me\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m__traceback__\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.11/dist-packages/keras/src/backend/tensorflow/trainer.py\u001b[0m in \u001b[0;36mfit\u001b[0;34m(self, x, y, batch_size, epochs, verbose, callbacks, validation_split, validation_data, shuffle, class_weight, sample_weight, initial_epoch, steps_per_epoch, validation_steps, validation_batch_size, validation_freq)\u001b[0m\n\u001b[1;32m    369\u001b[0m                 \u001b[0;32mfor\u001b[0m \u001b[0mstep\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0miterator\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mepoch_iterator\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    370\u001b[0m                     \u001b[0mcallbacks\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mon_train_batch_begin\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mstep\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 371\u001b[0;31m                     \u001b[0mlogs\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mtrain_function\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0miterator\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    372\u001b[0m                     \u001b[0mcallbacks\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mon_train_batch_end\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mstep\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mlogs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    373\u001b[0m                     \u001b[0;32mif\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mstop_training\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.11/dist-packages/keras/src/backend/tensorflow/trainer.py\u001b[0m in \u001b[0;36mfunction\u001b[0;34m(iterator)\u001b[0m\n\u001b[1;32m    218\u001b[0m             ):\n\u001b[1;32m    219\u001b[0m                 \u001b[0mopt_outputs\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mmulti_step_on_iterator\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0miterator\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 220\u001b[0;31m                 \u001b[0;32mif\u001b[0m \u001b[0;32mnot\u001b[0m \u001b[0mopt_outputs\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mhas_value\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    221\u001b[0m                     \u001b[0;32mraise\u001b[0m \u001b[0mStopIteration\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    222\u001b[0m                 \u001b[0;32mreturn\u001b[0m \u001b[0mopt_outputs\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mget_value\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.11/dist-packages/tensorflow/python/data/ops/optional_ops.py\u001b[0m in \u001b[0;36mhas_value\u001b[0;34m(self, name)\u001b[0m\n\u001b[1;32m    174\u001b[0m   \u001b[0;32mdef\u001b[0m \u001b[0mhas_value\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mname\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;32mNone\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    175\u001b[0m     \u001b[0;32mwith\u001b[0m \u001b[0mops\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mcolocate_with\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_variant_tensor\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 176\u001b[0;31m       return gen_optional_ops.optional_has_value(\n\u001b[0m\u001b[1;32m    177\u001b[0m           \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_variant_tensor\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mname\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mname\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    178\u001b[0m       )\n","\u001b[0;32m/usr/local/lib/python3.11/dist-packages/tensorflow/python/ops/gen_optional_ops.py\u001b[0m in \u001b[0;36moptional_has_value\u001b[0;34m(optional, name)\u001b[0m\n\u001b[1;32m    170\u001b[0m   \u001b[0;32mif\u001b[0m \u001b[0mtld\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mis_eager\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    171\u001b[0m     \u001b[0;32mtry\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 172\u001b[0;31m       _result = pywrap_tfe.TFE_Py_FastPathExecute(\n\u001b[0m\u001b[1;32m    173\u001b[0m         _ctx, \"OptionalHasValue\", name, optional)\n\u001b[1;32m    174\u001b[0m       \u001b[0;32mreturn\u001b[0m \u001b[0m_result\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mKeyboardInterrupt\u001b[0m: "],"ename":"KeyboardInterrupt","evalue":"","output_type":"error"}],"execution_count":86},{"cell_type":"code","source":"y_pred = model.predict({'text_input': x_test, 'other_feature': x_test_pre})\nfrom sklearn.metrics import roc_auc_score\nroc_auc_test = roc_auc_score(y_test, y_pred)\nprint(f\"Test ROC-AUC: {roc_auc_test:.4f}\")","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-07-30T17:09:02.739846Z","iopub.status.idle":"2025-07-30T17:09:02.740258Z","shell.execute_reply.started":"2025-07-30T17:09:02.740043Z","shell.execute_reply":"2025-07-30T17:09:02.740060Z"}},"outputs":[],"execution_count":null}]}